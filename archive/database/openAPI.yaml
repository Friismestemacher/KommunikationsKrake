openapi: 3.0.3
info:
  title: Sommerblut-Database
  description: Event and festival info
  contact:
    name: XTAIN GmbH
    email: support@xtain.net
  version: 1.5.0
servers:
  - url: 'https://datenbank.sommerblut.de'
tags:
  - name: "festivals"
  - name: "events"
  - name: "dates of events"
  - name: "categories"
  - name: "locations"
  - name: "stages"
  - name: "accessibilities"
  - name: "tags"
  - name: "running events"
  - name: "running streams"
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    events:
      type: array
      description: List of all events
      items:
        $ref: '#/components/schemas/event'
    event:
      type: object
      properties:
        remark:
          type: string
          description: Additional infos about the event
        accessible_request_sommerblut:
          type: array
          description: Accessibility options
          items:
            $ref: '#/components/schemas/accessibility'
        divergent_subtitle:
          type: string
          description: Divergent subtitle
          maxLength: 255
        description_header_image:
          type: string
          maxLength: 255
        photo_delivery_date:
          type: string
          description: Date of photo delivery
          example: "2021-01-21T00:00:00+00:00"
          format: date
          pattern: "YYYY-MM-DDT00:00:00+00:00"
          minLength: 25
          maxLength: 25
        festival:
          $ref: '#/components/schemas/festival'
        audience_format:
          type: array
          description: Audience format
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
                maxLength: 255
        category:
          type: array
          description: All categories/genres of the event
          items:
            $ref: '#/components/schemas/category'
        event_dates:
          type: array
          description: All event dates of the event
          items:
            $ref: '#/components/schemas/eventDate'
        photo_delivery:
          type: object
          description: Photo delivery option
          properties:
            id:
              type: integer
            name:
              type: string
            requires_date:
              type: boolean
        ensembles:
          type: array
          description: List of persons in ensembles
          items:
            type: object
            properties:
              id:
                type: integer
              firstname:
                type: string
                description: Full name
                maxLength: 255
              number_in_order:
                type: integer
                description: Order number of person in ensemble
              ensemble_function:
                type: object
                description: Function of person in ensemble
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                    maxLength: 255
        missing_ensemble_positions:
          type: string
          description: Field for missing ensemble function
          maxLength: 255
        next_date:
          type: object
          properties:
            min_date:
              type: string
              example: "2021-01-21T00:00:00+00:00"
              format: date
              pattern: "YYYY-MM-DDT00:00:00+00:00"
              minLength: 25
              maxLength: 25
        min_date:
          type: object
          properties:
            min_date:
              type: string
              example: "2021-01-21T00:00:00+00:00"
              format: date
              pattern: "YYYY-MM-DDT00:00:00+00:00"
              minLength: 25
              maxLength: 25
        productions_type:
          type: integer
          description: Production type
        show_reduced_date_list:
          type: boolean
          description: Show one event list for all dates
        is_locked:
          type: boolean
          description: Locked for edit
        is_completely_translated:
          type: boolean
          description: 'A placeholder should be placed for the translations, if this is marked as false'
        tags:
          type: array
          description: Tags
          items:
            $ref: '#/components/schemas/tag'
        streaming_player:
          type: string
          description: Streaming player
        chat:
          type: string
          description: Chat
        internal_notices:
          type: string
          description: Internal remark
        logo_group1:
          type: string
          description: Logo group 1
        logo_group2:
          type: string
          description: Logo group 2
        logo_group3:
          type: string
          description: Logo group 3
        logo_group4:
          type: string
          description: Logo group 4
        logo_group5:
          type: string
          description: Logo group 5
        hide_event_dates:
          type: boolean
          description: Hide event dates
        date_replacement:
          type: string
          description: Text replacement for event date
        event_images:
          type: string
          format: json
          description: Event images
        id:
          type: integer
        health_infection_notice:
          type: string
          description: Covid Info for chatbot
        title:
          type: string
          maxLength: 255
        substitle:
          type: string
          maxLength: 255
        program_content:
          type: string
          description: Program content
        info_text:
          type: string
          description: Internal notices
        duration_minutes:
          type: integer
          description: Duration in minutes
        audience_format_other:
          type: string
          description: Other audience format
          maxLength: 255
        video_links:
          type: string
          description: Video links
        fotografer_allowed:
          type: boolean
          description: Is a fotografer allowed at the event
        artist_name:
          type: string
          description: Name of Artist
          maxLength: 255
        location_remark:
          type: string
          description: PR / Social Media
        price_vvk:
          type: number
          multipleOf: 0.01
          description: Price pre sale
        price_vvk_reduced:
          type: number
          multipleOf: 0.01
          description: Reduced price pre sale
        price_ak:
          type: number
          multipleOf: 0.01
          description: Price box office
        price_ak_reduced:
          type: number
          multipleOf: 0.01
          description: Reduced price box office
        ticket_link:
          type: string
          description: Link to the ticket shop
          maxLength: 255
        max_capacity:
          type: integer
          description: Maximum capacity
        max_tickets_vvk:
          type: integer
          description: Maximum of pre sale tickets
        info_tickets_vvk:
          type: string
          description: Additional ticketing info
        accessible_other:
          type: string
          description: accessible notice for chatbot in language ls
          maxLength: 1023
        evening_program:
          type: boolean
          description: Programm sheet
        short_description:
          type: string
          description: Short description
        social_media_info:
          type: string
          description: Social media channels (e.g. YouTube) from artists
        social_media_promoter:
          type: string
          description: Social media channels (e.g. YouTube) from location
        location:
          $ref: '#/components/schemas/location'
        ticket_proportions:
          type: boolean
          description: Consent to ticket proportions
        price_handling:
          type: object
          description: Option for enabling or disabling price fields
          properties:
            id:
              type: integer
            enable_price_fields:
              type: boolean
            show_name_in_fe:
              type: boolean
              description: Should the name be shown in Frontend instead of price fields
            name:
              type: string
              maxLength: 255
    dates:
      type: array
      items:
        type: object
        properties:
          event:
            $ref: '#/components/schemas/event'
          eventdate:
            type: string
            description: Date of event
            example: "2021-01-21T00:00:00+00:00"
            format: date
            pattern: "YYYY-MM-DDT00:00:00+00:00"
            minLength: 25
            maxLength: 25
    eventDates:
      type: array
      items:
        $ref: '#/components/schemas/eventDate'
    eventDate:
      type: object
      properties:
        id:
          type: integer
        additional_title:
          type: string
          description: Date remark
          maxLength: 1023
        date:
          type: string
          description: Date of event
          example: "2021-01-21T00:00:00+00:00"
          format: date
          pattern: "YYYY-MM-DDT00:00:00+00:00"
          minLength: 25
          maxLength: 25
        end_date:
          type: string
          description: Ending time
          example: "12:24"
          format: time
          pattern: "HH:mm"
          minLength: 5
          maxLength: 5
        opening_time:
          type: string
          description: Opening time
          example: "12:24"
          format: time
          pattern: "HH:mm"
          minLength: 5
          maxLength: 5
        location:
          type: string
          description: Location
          maxLength: 255
        ticket_link:
          type: string
          description: Link to ticket shop
          maxLength: 255
        event:
          $ref: '#/components/schemas/event'
        streaming_player:
          type: string
          description: Streaming player
        chat:
          type: string
          description: Chat
    festivals:
      type: array
      items:
        $ref: '#/components/schemas/festival'
    festival:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 255
        year:
          type: string
          maxLength: 4
        theme:
          type: string
          description: Festivals theme
          maxLength: 255
        is_archived:
          type: boolean
          description: Is the festival archived or not
        is_released:
          type: boolean
          description: Is this festival already released for the frontend
        summary:
          type: string
        press_reviews:
          type: string
          description: Press reviews
        short_description:
          type: string
          description: Short description
        festival_images:
          type: string
          description: Festival images in .json
    categories:
      type: array
      items:
        $ref: '#/components/schemas/category'
    category:
      type: object
      description: category/genre
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 255
    locations:
      type: array
      description: stages
      items:
        $ref: '#/components/schemas/location'
    location:
      type: object
      description: stage
      properties:
        id:
          type: integer
        street:
          type: string
          maxLength: 100
        number:
          type: integer
          maxLength: 10
        postal:
          type: integer
          maxLength: 7
        city:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        contracts:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              firstname:
                type: string
                maxLength: 100
              surname:
                type: string
                maxLength: 100
              email:
                type: string
                maxLength: 255
              phone:
                type: string
                maxLength: 50
              mobile:
                type: string
                maxLength: 50
              web:
                type: string
                maxLength: 255
        hints:
          type: string
          description: notice
        name:
          type: string
          maxLength: 255
        accessible_request:
          type: string
          description: Accessibility
        accessible_request_object:
          type: array
          description: Accessibilities
          items:
            $ref: '#/components/schemas/accessibility'
        location_group:
          $ref: '#/components/schemas/locationGroup'
        direction_description:
          type: string
          description: directions
    locationGroups:
      type: array
      description: locations
      items:
        $ref: '#/components/schemas/locationGroup'
    locationGroup:
      type: object
      description: location
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: integer
        locations:
          $ref: '#/components/schemas/locations'
    accessibilities:
      type: array
      items:
        $ref: '#/components/schemas/accessibility'
    accessibility:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 255
        is_location_related:
          type: boolean
    tags:
      type: array
      items:
        $ref: '#/components/schemas/tag'
    tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: Name
          maxLength: 255
security:
  - basicAuth: [ ]
paths:
  /api/festivals.json:
    get:
      tags:
        - "festivals"
      summary: get all festivals
      description: get all festivals without parameters
      operationId: getAllFestivals
      parameters:
        - name: "year"
          in: "query"
          description: "returns festivals of the given year"
          required: false
          schema:
            type: "integer"
        - name: "archive"
          in: "query"
          description: "returns all archived or not archived festivals (value 0 or 1)"
          required: false
          schema:
            type: "boolean"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/festivals'
            'Language':
              schema:
                type: string
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/festivals/{festivalId}.json:
    get:
      tags:
        - "festivals"
      summary: find festival by ID
      description: returns a single festival
      operationId: getFestivalById
      parameters:
        - name: "festivalId"
          in: "path"
          description: "ID of festival to return"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/festival'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/festivals/years.json:
    get:
      tags:
        - "festivals"
      summary: get all festival years
      description: get all festival years
      operationId: getAllFestivalYears
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                description: Year list
                items:
                  type: string
                  description: Year
                  minLength: 4
                  maxLength: 4
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events.json:
    get:
      tags:
        - "events"
      summary: get all events
      description: get all events
      operationId: getAllEvents
      parameters:
        - name: "order"
          in: "query"
          description: "Sets the order of returning events (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "entries"
          in: "query"
          description: "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5"
          required: false
          schema:
            type: "integer"
        - name: "page"
          in: "query"
          description: "Number of page<br>Example: /api/events.json?page=2"
          required: false
          schema:
            type: "integer"
        - name: "year"
          in: "query"
          description: "returns all events of the given year<br>Example: /api/events.json?year=2020"
          required: false
          schema:
            type: "integer"
        - name: "archive"
          in: "query"
          description: "returns all events of archived or not archived festivals<br>Example: /api/events.json?archive=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "reducedDateList"
          in: "query"
          description: "returns all events, that span over a timeframe instead of consisting of a list of single event dates<br>Example: /api/events.json?reducedDateList=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "category"
          in: "query"
          description: "returns events that have a category with the given categoryId (min. one of array)<br>Example: /api/events.json?category=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[category]"
          in: "query"
          description: "returns events that have all categories in the array given with the category parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "tag"
          in: "query"
          description: "returns events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "accessible"
          in: "query"
          description: "returns events that have a accessibility with the given accessibilityID (min. one of array<br>Example: /api/events.json?accessible=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[accessible]"
          in: "query"
          description: "returns events that have all accessibilities in the array given with the accessible parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "location"
          in: "query"
          description: "returns events that have a location with the given locationID<br>Example: /api/events.json?location=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "time"
          in: "query"
          description: "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "fromDate"
          in: "query"
          description: "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "toDate"
          in: "query"
          description: "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/{eventId}.json:
    get:
      tags:
        - "events"
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventById
      parameters:
        - name: "eventId"
          in: "path"
          description: "ID of event to return"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/{eventName}.details.json:
    get:
      tags:
        - "events"
      summary: Find events by name
      description: Returns all events with the given name
      operationId: getEventsByName
      parameters:
        - name: "eventName"
          in: "path"
          description: "Name of events to return"
          required: true
          schema:
            type: "string"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/festivals/{year}/events.json:
    get:
      tags:
        - "events"
      summary: find events by year
      description: returns all published events in the provided year
      operationId: getEventsByYear
      parameters:
        - name: "year"
          in: "path"
          description: "Year of festival for events to return"
          required: true
          schema:
            type: "integer"
        - name: "order"
          in: "query"
          description: "Sets the order of returning events (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "entries"
          in: "query"
          description: "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5"
          required: false
          schema:
            type: "integer"
        - name: "page"
          in: "query"
          description: "Number of page<br>Example: /api/events.json?page=2"
          required: false
          schema:
            type: "integer"
        - name: "archive"
          in: "query"
          description: "returns all events of archived or not archived festivals<br>Example: /api/events.json?archive=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "reducedDateList"
          in: "query"
          description: "returns all events, that span over a timeframe instead of consisting of a list of single event dates<br>Example: /api/events.json?reducedDateList=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "category"
          in: "query"
          description: "returns events that have a category with the given categoryId (min. one of array)<br>Example: /api/events.json?category=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[category]"
          in: "query"
          description: "returns events that have all categories in the array given with the category parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "tag"
          in: "query"
          description: "returns events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "accessible"
          in: "query"
          description: "returns events that have a accessibility with the given accessibilityID (min. one of array<br>Example: /api/events.json?accessible=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[accessible]"
          in: "query"
          description: "returns events that have all accessibilities in the array given with the accessible parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "location"
          in: "query"
          description: "returns events that have a location with the given locationID<br>Example: /api/events.json?location=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "time"
          in: "query"
          description: "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "fromDate"
          in: "query"
          description: "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "toDate"
          in: "query"
          description: "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/festivals/current/events.json:
    get:
      tags:
        - "events"
      summary: get all current events
      description: returns all published events that are not already archived
      operationId: getCurrentEvents
      parameters:
        - name: "order"
          in: "query"
          description: "Sets the order of returning events (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "entries"
          in: "query"
          description: "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5"
          required: false
          schema:
            type: "integer"
        - name: "page"
          in: "query"
          description: "Number of page<br>Example: /api/events.json?page=2"
          required: false
          schema:
            type: "integer"
        - name: "year"
          in: "query"
          description: "returns all events of the given year<br>Example: /api/events.json?year=2020"
          required: false
          schema:
            type: "integer"
        - name: "reducedDateList"
          in: "query"
          description: "returns all events, that span over a timeframe instead of consisting of a list of single event dates<br>Example: /api/events.json?reducedDateList=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "category"
          in: "query"
          description: "returns events that have a category with the given categoryId (min. one of array)<br>Example: /api/events.json?category=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[category]"
          in: "query"
          description: "returns events that have all categories in the array given with the category parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "tag"
          in: "query"
          description: "returns events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "accessible"
          in: "query"
          description: "returns events that have a accessibility with the given accessibilityID (min. one of array<br>Example: /api/events.json?accessible=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[accessible]"
          in: "query"
          description: "returns events that have all accessibilities in the array given with the accessible parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "location"
          in: "query"
          description: "returns events that have a location with the given locationID<br>Example: /api/events.json?location=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "time"
          in: "query"
          description: "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "fromDate"
          in: "query"
          description: "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "toDate"
          in: "query"
          description: "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/events'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/dates.json:
    get:
      tags:
        - "dates of events"
      summary: get all dates of events
      description: returns all dates of events and the related events
      operationId: getAllDatesOfEvents
      parameters:
        - name: "order"
          in: "query"
          description: "Sets the order of returning event dates (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "entries"
          in: "query"
          description: "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5"
          required: false
          schema:
            type: "integer"
        - name: "page"
          in: "query"
          description: "Number of page<br>Example: /api/events.json?page=2"
          required: false
          schema:
            type: "integer"
        - name: "year"
          in: "query"
          description: "returns event dates of events of the given year<br>Example: /api/events.json?year=2020"
          required: false
          schema:
            type: "integer"
        - name: "archive"
          in: "query"
          description: "returns event dates of events of archived or not archived festivals<br>Example: /api/events.json?archive=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "reducedDateList"
          in: "query"
          description: "returns all events, that span over a timeframe instead of consisting of a list of single event dates<br>Example: /api/events.json?reducedDateList=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "category"
          in: "query"
          description: "returns events that have a category with the given categoryId (min. one of array)<br>Example: /api/events.json?category=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[category]"
          in: "query"
          description: "returns events that have all categories in the array given with the category parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "tag"
          in: "query"
          description: "returns events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "accessible"
          in: "query"
          description: "returns events that have a accessibility with the given accessibilityID (min. one of array<br>Example: /api/events.json?accessible=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[accessible]"
          in: "query"
          description: "returns events that have all accessibilities in the array given with the accessible parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "location"
          in: "query"
          description: "returns event dates of events that have a location with the given locationID<br>Example: /api/events.json?location=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "time"
          in: "query"
          description: "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "fromDate"
          in: "query"
          description: "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "toDate"
          in: "query"
          description: "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/festivals/{year}/events/dates.json:
    get:
      tags:
        - "dates of events"
      summary: find dates of events by year
      description: returns all dates of events and the related events in the provided year
      operationId: getDatesOfEventsByYear
      parameters:
        - name: "year"
          in: "path"
          description: "Year of festival for event dates to return"
          required: true
          schema:
            type: "integer"
        - name: "order"
          in: "query"
          description: "Sets the order of returning event dates (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "entries"
          in: "query"
          description: "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5"
          required: false
          schema:
            type: "integer"
        - name: "page"
          in: "query"
          description: "Number of page<br>Example: /api/events.json?page=2"
          required: false
          schema:
            type: "integer"
        - name: "archive"
          in: "query"
          description: "returns event dates of events of archived or not archived festivals<br>Example: /api/events.json?archive=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "reducedDateList"
          in: "query"
          description: "returns all events, that span over a timeframe instead of consisting of a list of single event dates<br>Example: /api/events.json?reducedDateList=1"
          required: false
          schema:
            type: "integer"
            minimum: 0
            maximum: 1
        - name: "category"
          in: "query"
          description: "returns events that have a category with the given categoryId (min. one of array)<br>Example: /api/events.json?category=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[category]"
          in: "query"
          description: "returns events that have all categories in the array given with the category parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "tag"
          in: "query"
          description: "returns events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "accessible"
          in: "query"
          description: "returns events that have a accessibility with the given accessibilityID (min. one of array<br>Example: /api/events.json?accessible=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "conjunction[accessible]"
          in: "query"
          description: "returns events that have all accessibilities in the array given with the accessible parameter<br>'and' is the only working value see example<br>Example: /api/events.json?conjunction[category]=and"
          required: false
          schema:
            type: "string"
        - name: "location"
          in: "query"
          description: "returns event dates of events that have a location with the given locationID<br>Example: /api/events.json?location=[100]"
          required: false
          schema:
            type: "array"
            items:
              type: "integer"
        - name: "time"
          in: "query"
          description: "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "fromDate"
          in: "query"
          description: "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "toDate"
          in: "query"
          description: "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/categories.json:
    get:
      tags:
        - "categories"
      summary: get all categories
      description: get all categories without parameters
      operationId: getAllCategories
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/categories/{categoryId}.json:
    get:
      tags:
        - "categories"
      summary: Find category by ID
      description: Returns a single category
      operationId: getCategoryById
      parameters:
        - name: "categoryId"
          in: "path"
          description: "ID of category to return"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/categories/current.json:
    get:
      tags:
        - "categories"
      summary: get all current categories
      description: get all categories that are selected in current events
      operationId: getAllCurrentCategories
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/locationGroups.json:
    get:
      tags:
        - "locations"
      summary: get all locationGroups
      description: get all locationGroups with all related locations
      operationId: getAllLocationGroups
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationGroups'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/locationGroups/current.json:
    get:
      tags:
        - "locations"
      summary: get all locationsGroups from current events
      description: get all locationsGroups from current events with all related locations
      operationId: getAllCurrentLocationGroups
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationGroups'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/locationGroups/{locationGroupId}.json:
    get:
      tags:
        - "locations"
      summary: Find locationGroup by ID
      description: Returns a single locationGroup with all related locations
      operationId: getLocationGroupById
      parameters:
        - name: "locationGroupId"
          in: "path"
          description: "ID of locationGroup to return"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationGroup'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/locationGroups/{locationGroupId}/locations/current.json:
    get:
      tags:
        - "locations"
      summary: Find current locations for locationGroup by ID
      description: Returns all related locations to that location group which are used on released festival and events
      operationId: getAllCurrentLocationsFromLocationGroup
      parameters:
        - name: "locationGroupId"
          in: "path"
          description: "ID of locationGroup for filtering"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locations'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/locations.json:
    get:
      tags:
        - "stages"
      summary: get all locations
      description: get all locations (stages)
      operationId: getAllLocations
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locations'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/locations/current.json:
    get:
      tags:
        - "stages"
      summary: get all locations from current events
      description: get all locations (stages) from current events
      operationId: getAllCurrentLocations
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locations'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/locations/{locationId}.json:
    get:
      tags:
        - "stages"
      summary: Find location by ID
      description: Returns a single location (stage)
      operationId: getLocationById
      parameters:
        - name: "locationId"
          in: "path"
          description: "ID of location to return"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/accessibilities.json:
    get:
      tags:
        - "accessibilities"
      summary: get all accessibilities
      description: get all accessibilities without parameters
      operationId: getAllAccessibilities
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessibilities'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/accessibilities/{accessibilityId}.json:
    get:
      tags:
        - "accessibilities"
      summary: Find accessibility by ID
      description: Returns a single accessibility
      operationId: getAccessibilityById
      parameters:
        - name: "accessibilityId"
          in: "path"
          description: "ID of accessibility to return"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accessibility'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/tags.json:
    get:
      tags:
        - "tags"
      summary: get all tags
      description: get all tags without parameters
      operationId: getAllTags
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/tag/{tagId}.json:
    get:
      tags:
        - "tags"
      summary: Find tag by ID
      description: Returns a single tag
      operationId: getTagById
      parameters:
        - name: "tagId"
          in: "path"
          description: "ID of tag to return"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/stream/running.json:
    get:
      tags:
        - "running streams"
      summary: returns all running streams
      description: get all eventDates, that are running and are streamed
      operationId: getAllRunningStreams
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventDates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/{eventId}/stream/running.json:
    get:
      tags:
        - "running streams"
      summary: returns all running streams for the given eventId
      description: returns all eventDates for the given eventId, that are running and are streamed
      operationId: getAllRunningStreamsByEventId
      parameters:
        - name: "eventId"
          in: "path"
          description: "ID of event"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventDates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/stream/running/next.json:
    get:
      tags:
        - "running streams"
      summary: returns all upcoming streams
      description: returns all upcoming eventDates, that are streamed
      operationId: getAllNextStreams
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventDates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/{eventId}/stream/running/next.json:
    get:
      tags:
        - "running streams"
      summary: returns all upcoming streams for the given eventId
      description: returns all upcoming eventDates for the given eventId, that are streamed
      operationId: getAllNextStreamsByEventId
      parameters:
        - name: "eventId"
          in: "path"
          description: "ID of event"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventDates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/running.json:
    get:
      tags:
        - "running events"
      summary: returns all running eventsDates
      description: returns all running eventDates
      operationId: getAllRunningEventDates
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventDates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/{eventId}/running.json:
    get:
      tags:
        - "running events"
      summary: returns all running eventDates for the given eventId
      description: returns all running eventDates for the given eventId
      operationId: getAllRunningEventDatesByEventId
      parameters:
        - name: "eventId"
          in: "path"
          description: "ID of event"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventDates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/running/next.json:
    get:
      tags:
        - "running events"
      summary: returns all upcoming events
      description: get all upcoming eventDates
      operationId: getAllNextEventDates
      parameters:
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventDates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
  /api/events/{eventId}/running/next.json:
    get:
      tags:
        - "running events"
      summary: returns all upcoming eventDates for the given eventId
      description: returns all upcoming eventDates for the given eventId
      operationId: getAllNextEventDatesByEventId
      parameters:
        - name: "eventId"
          in: "path"
          description: "ID of event"
          required: true
          schema:
            type: "integer"
        - name: "Accept-Language"
          in: "header"
          description: "request specific language"
          required: false
          schema:
            type: "string"
          example: "de"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventDates'
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
