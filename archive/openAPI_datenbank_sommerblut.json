{
  "openapi": "3.0.3",
  "info": {
    "title": "Sommerblut-Database",
    "description": "Event and festival info",
    "contact": {
      "name": "XTAIN GmbH",
      "email": "support@xtain.net"
    },
    "version": "1.5.0"
  },
  "servers": [
    {
      "url": "https://datenbank.sommerblut.de"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "festivals"
    },
    {
      "name": "events"
    },
    {
      "name": "dates of events"
    },
    {
      "name": "categories"
    },
    {
      "name": "locations"
    },
    {
      "name": "stages"
    },
    {
      "name": "accessibilities"
    },
    {
      "name": "tags"
    },
    {
      "name": "running events"
    },
    {
      "name": "running streams"
    }
  ],
  "paths": {
    "/api/festivals.json": {
      "get": {
        "tags": [
          "festivals"
        ],
        "summary": "get all festivals",
        "description": "get all festivals without parameters",
        "operationId": "getAllFestivals",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "returns festivals of the given year",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "archive",
            "in": "query",
            "description": "returns all archived or not archived festivals (value 0 or 1)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/festivals"
                }
              },
              "Language": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/festivals/{festivalId}.json": {
      "get": {
        "tags": [
          "festivals"
        ],
        "summary": "find festival by ID",
        "description": "returns a single festival",
        "operationId": "getFestivalById",
        "parameters": [
          {
            "name": "festivalId",
            "in": "path",
            "description": "ID of festival to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/festival"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/festivals/years.json": {
      "get": {
        "tags": [
          "festivals"
        ],
        "summary": "get all festival years",
        "description": "get all festival years",
        "operationId": "getAllFestivalYears",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Year list",
                  "items": {
                    "maxLength": 4,
                    "minLength": 4,
                    "type": "string",
                    "description": "Year"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events.json": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "get all events",
        "description": "get all events",
        "operationId": "getAllEvents",
        "parameters": [
          {
            "name": "order",
            "in": "query",
            "description": "Sets the order of returning events (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entries",
            "in": "query",
            "description": "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page<br>Example: /api/events.json?page=2",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "returns all events of the given year<br>Example: /api/events.json?year=2020",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "archive",
            "in": "query",
            "description": "returns all events of archived or not archived festivals<br>Example: /api/events.json?archive=1",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "returns events that have a category with the given categoryId<br>Example: /api/events.json?category=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "returns events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "accessible",
            "in": "query",
            "description": "returns events that have a accessibility with the given accessibilityID<br>Example: /api/events.json?accessible=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "returns events that have a location with the given locationID<br>Example: /api/events.json?location=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/events"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}.json": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Find event by ID",
        "description": "Returns a single event",
        "operationId": "getEventById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventName}.details.json": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Find events by name",
        "description": "Returns all events with the given name",
        "operationId": "getEventsByName",
        "parameters": [
          {
            "name": "eventName",
            "in": "path",
            "description": "Name of events to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/events"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/festivals/{year}/events.json": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "find events by year",
        "description": "returns all published events in the provided year",
        "operationId": "getEventsByYear",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Year of festival for events to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sets the order of returning events (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entries",
            "in": "query",
            "description": "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page<br>Example: /api/events.json?page=2",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "archive",
            "in": "query",
            "description": "returns all events of archived or not archived festivals<br>Example: /api/events.json?archive=1",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "returns events that have a category with the given categoryId<br>Example: /api/events.json?category=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "returns events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "accessible",
            "in": "query",
            "description": "returns events that have a accessibility with the given accessibilityID<br>Example: /api/events.json?accessible=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "returns events that have a location with the given locationID<br>Example: /api/events.json?location=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/events"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/festivals/current/events.json": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "get all current events",
        "description": "returns all published events that are not already archived",
        "operationId": "getCurrentEvents",
        "parameters": [
          {
            "name": "order",
            "in": "query",
            "description": "Sets the order of returning events (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entries",
            "in": "query",
            "description": "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page<br>Example: /api/events.json?page=2",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "returns all events of the given year<br>Example: /api/events.json?year=2020",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "returns events that have a category with the given categoryId<br>Example: /api/events.json?category=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "returns events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "accessible",
            "in": "query",
            "description": "returns events that have a accessibility with the given accessibilityID<br>Example: /api/events.json?accessible=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "returns events that have a location with the given locationID<br>Example: /api/events.json?location=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/events"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/dates.json": {
      "get": {
        "tags": [
          "dates of events"
        ],
        "summary": "get all dates of events",
        "description": "returns all dates of events and the related events",
        "operationId": "getAllDatesOfEvents",
        "parameters": [
          {
            "name": "order",
            "in": "query",
            "description": "Sets the order of returning event dates (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entries",
            "in": "query",
            "description": "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page<br>Example: /api/events.json?page=2",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "returns event dates of events of the given year<br>Example: /api/events.json?year=2020",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "archive",
            "in": "query",
            "description": "returns event dates of events of archived or not archived festivals<br>Example: /api/events.json?archive=1",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "returns event dates of events that have a category with the given categoryId<br>Example: /api/events.json?category=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "returns event dates of events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "accessible",
            "in": "query",
            "description": "returns event dates of events that have a accessibility with the given accessibilityID<br>Example: /api/events.json?accessible=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "returns event dates of events that have a location with the given locationID<br>Example: /api/events.json?location=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/festivals/{year}/events/dates.json": {
      "get": {
        "tags": [
          "dates of events"
        ],
        "summary": "find dates of events by year",
        "description": "returns all dates of events and the related events in the provided year",
        "operationId": "getDatesOfEventsByYear",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Year of festival for event dates to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sets the order of returning event dates (d - descending)<br>Example: /api/events.json?order=[\"location\"]<br>Possible Values:<br> - date<br> - date-d<br> - event<br> - event-d<br> - artist<br> - artist-d<br> - location<br> - location-d",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entries",
            "in": "query",
            "description": "Number of entries per page to return (standard = 10)<br>Example: /api/events.json?entries=5",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Number of page<br>Example: /api/events.json?page=2",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "archive",
            "in": "query",
            "description": "returns event dates of events of archived or not archived festivals<br>Example: /api/events.json?archive=1",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "returns event dates of events that have a category with the given categoryId<br>Example: /api/events.json?category=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "returns event dates of events that have a tag with the given tagId<br>Example: /api/events.json?tag=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "accessible",
            "in": "query",
            "description": "returns event dates of events that have a accessibility with the given accessibilityID<br>Example: /api/events.json?accessible=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "returns event dates of events that have a location with the given locationID<br>Example: /api/events.json?location=[100]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "returns events with event dates in the given timeframe<br>Example: /api/events.json?time=[\"today\"]<br>Possible Values:<br> - today<br> - upcoming<br> - past",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "returns events with event dates from the given date<br>Example: /api/events.json?fromDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "returns events with event dates to the given date<br>Example: /api/events.json?toDate=[\"2022-02-14 00:00:00\"]",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/categories.json": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "get all categories",
        "description": "get all categories without parameters",
        "operationId": "getAllCategories",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/categories/{categoryId}.json": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Find category by ID",
        "description": "Returns a single category",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/categories/current.json": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "get all current categories",
        "description": "get all categories that are selected in current events",
        "operationId": "getAllCurrentCategories",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/locationGroups.json": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "get all locationGroups",
        "description": "get all locationGroups with all related locations",
        "operationId": "getAllLocationGroups",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locationGroups"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/locationGroups/current.json": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "get all locationsGroups from current events",
        "description": "get all locationsGroups from current events with all related locations",
        "operationId": "getAllCurrentLocationGroups",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locationGroups"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/locationGroups/{locationGroupId}.json": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Find locationGroup by ID",
        "description": "Returns a single locationGroup with all related locations",
        "operationId": "getLocationGroupById",
        "parameters": [
          {
            "name": "locationGroupId",
            "in": "path",
            "description": "ID of locationGroup to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locationGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/locations.json": {
      "get": {
        "tags": [
          "stages"
        ],
        "summary": "get all locations",
        "description": "get all locations (stages)",
        "operationId": "getAllLocations",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/locations/current.json": {
      "get": {
        "tags": [
          "stages"
        ],
        "summary": "get all locations from current events",
        "description": "get all locations (stages) from current events",
        "operationId": "getAllCurrentLocations",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/locations/{locationId}.json": {
      "get": {
        "tags": [
          "stages"
        ],
        "summary": "Find location by ID",
        "description": "Returns a single location (stage)",
        "operationId": "getLocationById",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "ID of location to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/location"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/accessibilities.json": {
      "get": {
        "tags": [
          "accessibilities"
        ],
        "summary": "get all accessibilities",
        "description": "get all accessibilities without parameters",
        "operationId": "getAllAccessibilities",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessibilities"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/accessibilities/{accessibilityId}.json": {
      "get": {
        "tags": [
          "accessibilities"
        ],
        "summary": "Find accessibility by ID",
        "description": "Returns a single accessibility",
        "operationId": "getAccessibilityById",
        "parameters": [
          {
            "name": "accessibilityId",
            "in": "path",
            "description": "ID of accessibility to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessibility"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/tags.json": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "get all tags",
        "description": "get all tags without parameters",
        "operationId": "getAllTags",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tags"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/tag/{tagId}.json": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Find tag by ID",
        "description": "Returns a single tag",
        "operationId": "getTagById",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "ID of tag to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/stream/running.json": {
      "get": {
        "tags": [
          "running streams"
        ],
        "summary": "returns all running streams",
        "description": "get all eventDates, that are running and are streamed",
        "operationId": "getAllRunningStreams",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/stream/running.json": {
      "get": {
        "tags": [
          "running streams"
        ],
        "summary": "returns all running streams for the given eventId",
        "description": "returns all eventDates for the given eventId, that are running and are streamed",
        "operationId": "getAllRunningStreamsByEventId",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/stream/running/next.json": {
      "get": {
        "tags": [
          "running streams"
        ],
        "summary": "returns all upcoming streams",
        "description": "returns all upcoming eventDates, that are streamed",
        "operationId": "getAllNextStreams",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/stream/running/next.json": {
      "get": {
        "tags": [
          "running streams"
        ],
        "summary": "returns all upcoming streams for the given eventId",
        "description": "returns all upcoming eventDates for the given eventId, that are streamed",
        "operationId": "getAllNextStreamsByEventId",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/running.json": {
      "get": {
        "tags": [
          "running events"
        ],
        "summary": "returns all running eventsDates",
        "description": "returns all running eventDates",
        "operationId": "getAllRunningEventDates",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/running.json": {
      "get": {
        "tags": [
          "running events"
        ],
        "summary": "returns all running eventDates for the given eventId",
        "description": "returns all running eventDates for the given eventId",
        "operationId": "getAllRunningEventDatesByEventId",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/running/next.json": {
      "get": {
        "tags": [
          "running events"
        ],
        "summary": "returns all upcoming events",
        "description": "get all upcoming eventDates",
        "operationId": "getAllNextEventDates",
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/running/next.json": {
      "get": {
        "tags": [
          "running events"
        ],
        "summary": "returns all upcoming eventDates for the given eventId",
        "description": "returns all upcoming eventDates for the given eventId",
        "operationId": "getAllNextEventDatesByEventId",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "request specific language",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "example": "de"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventDates"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "events": {
        "type": "array",
        "description": "List of all events",
        "items": {
          "$ref": "#/components/schemas/event"
        }
      },
      "event": {
        "type": "object",
        "properties": {
          "remark": {
            "type": "string",
            "description": "Additional infos about the event"
          },
          "accessible_request_sommerblut": {
            "type": "array",
            "description": "Accessibility options",
            "items": {
              "$ref": "#/components/schemas/accessibility"
            }
          },
          "divergent_subtitle": {
            "maxLength": 255,
            "type": "string",
            "description": "Divergent subtitle"
          },
          "photo_delivery_date": {
            "maxLength": 25,
            "minLength": 25,
            "pattern": "YYYY-MM-DDT00:00:00+00:00",
            "type": "string",
            "description": "Date of photo delivery",
            "format": "date"
          },
          "festival": {
            "$ref": "#/components/schemas/festival"
          },
          "audience_format": {
            "type": "array",
            "description": "Audience format",
            "items": {
              "$ref": "#/components/schemas/event_audience_format"
            }
          },
          "category": {
            "type": "array",
            "description": "All categories/genres of the event",
            "items": {
              "$ref": "#/components/schemas/category"
            }
          },
          "event_dates": {
            "type": "array",
            "description": "All event dates of the event",
            "items": {
              "$ref": "#/components/schemas/eventDate"
            }
          },
          "photo_delivery": {
            "$ref": "#/components/schemas/event_photo_delivery"
          },
          "ensembles": {
            "type": "array",
            "description": "List of persons in ensembles",
            "items": {
              "$ref": "#/components/schemas/event_ensembles"
            }
          },
          "missing_ensemble_positions": {
            "maxLength": 255,
            "type": "string",
            "description": "Field for missing ensemble function"
          },
          "next_date": {
            "$ref": "#/components/schemas/event_next_date"
          },
          "min_date": {
            "$ref": "#/components/schemas/event_next_date"
          },
          "contact_promoter": {
            "$ref": "#/components/schemas/event_contact_promoter"
          },
          "productions_type": {
            "type": "integer",
            "description": "Production type"
          },
          "show_reduced_date_list": {
            "type": "boolean",
            "description": "Show one event list for all dates"
          },
          "is_locked": {
            "type": "boolean",
            "description": "Locked for edit"
          },
          "is_completely_translated": {
            "type": "boolean",
            "description": "A placeholder should be placed for the translations, if this is marked as false"
          },
          "tags": {
            "type": "array",
            "description": "Tags",
            "items": {
              "$ref": "#/components/schemas/tag"
            }
          },
          "streaming_player": {
            "type": "string",
            "description": "Streaming player"
          },
          "chat": {
            "type": "string",
            "description": "Chat"
          },
          "internal_notices": {
            "type": "string",
            "description": "Internal remark"
          },
          "logo_group1": {
            "type": "string",
            "description": "Logo group 1"
          },
          "logo_group2": {
            "type": "string",
            "description": "Logo group 2"
          },
          "logo_group3": {
            "type": "string",
            "description": "Logo group 3"
          },
          "logo_group4": {
            "type": "string",
            "description": "Logo group 4"
          },
          "logo_group5": {
            "type": "string",
            "description": "Logo group 5"
          },
          "hide_event_dates": {
            "type": "boolean",
            "description": "Hide event dates"
          },
          "date_replacement": {
            "type": "string",
            "description": "Text replacement for event date"
          },
          "event_images": {
            "type": "string",
            "description": "Event images",
            "format": "json"
          },
          "id": {
            "type": "integer"
          },
          "title": {
            "maxLength": 255,
            "type": "string"
          },
          "substitle": {
            "maxLength": 255,
            "type": "string"
          },
          "program_content": {
            "type": "string",
            "description": "Program content"
          },
          "info_text": {
            "type": "string",
            "description": "Internal notices"
          },
          "duration_minutes": {
            "type": "integer",
            "description": "Duration in minutes"
          },
          "audience_format_other": {
            "maxLength": 255,
            "type": "string",
            "description": "Other audience format"
          },
          "video_links": {
            "type": "string",
            "description": "Video links"
          },
          "fotografer_allowed": {
            "type": "boolean",
            "description": "Is a fotografer allowed at the event"
          },
          "artist_name": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of Artist"
          },
          "location_remark": {
            "type": "string",
            "description": "PR / Social Media"
          },
          "price_vvk": {
            "multipleOf": 0.01,
            "type": "number",
            "description": "Price pre sale"
          },
          "price_vvk_reduced": {
            "multipleOf": 0.01,
            "type": "number",
            "description": "Reduced price pre sale"
          },
          "price_ak": {
            "multipleOf": 0.01,
            "type": "number",
            "description": "Price box office"
          },
          "price_ak_reduced": {
            "multipleOf": 0.01,
            "type": "number",
            "description": "Reduced price box office"
          },
          "ticket_link": {
            "maxLength": 255,
            "type": "string",
            "description": "Link to the ticket shop"
          },
          "max_capacity": {
            "type": "integer",
            "description": "Maximum capacity"
          },
          "max_tickets_vvk": {
            "type": "integer",
            "description": "Maximum of pre sale tickets"
          },
          "info_tickets_vvk": {
            "type": "string",
            "description": "Additional ticketing info"
          },
          "evening_program": {
            "type": "boolean",
            "description": "Programm sheet"
          },
          "short_description": {
            "type": "string",
            "description": "Short description"
          },
          "social_media_info": {
            "type": "string",
            "description": "Social media channels (e.g. YouTube) from artists"
          },
          "social_media_promoter": {
            "type": "string",
            "description": "Social media channels (e.g. YouTube) from location"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "ticket_proportions": {
            "type": "boolean",
            "description": "Consent to ticket proportions"
          },
          "price_handling": {
            "$ref": "#/components/schemas/event_price_handling"
          }
        }
      },
      "dates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/dates_inner"
        }
      },
      "eventDates": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/eventDate"
        }
      },
      "eventDate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "additional_title": {
            "maxLength": 1023,
            "type": "string",
            "description": "Date remark"
          },
          "date": {
            "maxLength": 25,
            "minLength": 25,
            "pattern": "YYYY-MM-DDT00:00:00+00:00",
            "type": "string",
            "description": "Date of event",
            "format": "date"
          },
          "end_date": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "HH:mm",
            "type": "string",
            "description": "Ending time",
            "format": "time",
            "example": "12:24"
          },
          "opening_time": {
            "maxLength": 5,
            "minLength": 5,
            "pattern": "HH:mm",
            "type": "string",
            "description": "Opening time",
            "format": "time",
            "example": "12:24"
          },
          "location": {
            "maxLength": 255,
            "type": "string",
            "description": "Location"
          },
          "ticket_link": {
            "maxLength": 255,
            "type": "string",
            "description": "Link to ticket shop"
          },
          "contact_promoter": {
            "$ref": "#/components/schemas/eventDate_contact_promoter"
          },
          "event": {
            "$ref": "#/components/schemas/event"
          },
          "streaming_player": {
            "type": "string",
            "description": "Streaming player"
          },
          "chat": {
            "type": "string",
            "description": "Chat"
          }
        }
      },
      "festivals": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/festival"
        }
      },
      "festival": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "year": {
            "maxLength": 4,
            "type": "string"
          },
          "theme": {
            "maxLength": 255,
            "type": "string",
            "description": "Festivals theme"
          },
          "is_archived": {
            "type": "boolean",
            "description": "Is the festival archived or not"
          },
          "is_released": {
            "type": "boolean",
            "description": "Is this festival already released for the frontend"
          },
          "summary": {
            "type": "string"
          },
          "press_reviews": {
            "type": "string",
            "description": "Press reviews"
          },
          "short_description": {
            "type": "string",
            "description": "Short description"
          },
          "festival_images": {
            "type": "string",
            "description": "Festival images in .json"
          }
        }
      },
      "categories": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/category"
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "description": "category/genre"
      },
      "locations": {
        "type": "array",
        "description": "stages",
        "items": {
          "$ref": "#/components/schemas/location"
        }
      },
      "location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "street": {
            "maxLength": 100,
            "type": "string"
          },
          "number": {
            "maxLength": 10,
            "type": "integer"
          },
          "postal": {
            "maxLength": 7,
            "type": "integer"
          },
          "city": {
            "maxLength": 100,
            "type": "string"
          },
          "country": {
            "maxLength": 100,
            "type": "string"
          },
          "contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/location_contracts"
            }
          },
          "hints": {
            "type": "string",
            "description": "notice"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "accessible_request": {
            "type": "string",
            "description": "Accessibility"
          },
          "location_group": {
            "$ref": "#/components/schemas/locationGroup"
          }
        },
        "description": "stage"
      },
      "locationGroups": {
        "type": "array",
        "description": "locations",
        "items": {
          "$ref": "#/components/schemas/locationGroup"
        }
      },
      "locationGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "locations": {
            "$ref": "#/components/schemas/locations"
          }
        },
        "description": "location"
      },
      "accessibilities": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/accessibility"
        }
      },
      "accessibility": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "is_location_related": {
            "type": "boolean"
          }
        }
      },
      "tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/tag"
        }
      },
      "tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Name"
          }
        }
      },
      "event_audience_format": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "example": null
      },
      "event_photo_delivery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "requires_date": {
            "type": "boolean"
          }
        },
        "description": "Photo delivery option",
        "example": null
      },
      "event_ensemble_function": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "description": "Function of person in ensemble",
        "example": null
      },
      "event_ensembles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstname": {
            "maxLength": 255,
            "type": "string",
            "description": "Full name"
          },
          "number_in_order": {
            "type": "integer",
            "description": "Order number of person in ensemble"
          },
          "ensemble_function": {
            "$ref": "#/components/schemas/event_ensemble_function"
          }
        },
        "example": null
      },
      "event_next_date": {
        "type": "object",
        "properties": {
          "min_date": {
            "maxLength": 25,
            "minLength": 25,
            "pattern": "YYYY-MM-DDT00:00:00+00:00",
            "type": "string",
            "format": "date"
          }
        },
        "example": null
      },
      "event_contact_promoter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstname": {
            "maxLength": 100,
            "type": "string"
          },
          "surname": {
            "maxLength": 100,
            "type": "string"
          },
          "email": {
            "maxLength": 255,
            "type": "string"
          },
          "phone": {
            "maxLength": 50,
            "type": "string"
          },
          "mobile": {
            "maxLength": 50,
            "type": "string"
          },
          "web": {
            "maxLength": 255,
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          }
        },
        "description": "Contact for event location",
        "example": null
      },
      "event_price_handling": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "enable_price_fields": {
            "type": "boolean"
          },
          "show_name_in_fe": {
            "type": "boolean",
            "description": "Should the name be shown in Frontend instead of price fields"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "description": "Option for enabling or disabling price fields",
        "example": null
      },
      "dates_inner": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/event"
          },
          "eventdate": {
            "maxLength": 25,
            "minLength": 25,
            "pattern": "YYYY-MM-DDT00:00:00+00:00",
            "type": "string",
            "description": "Date of event",
            "format": "date"
          }
        }
      },
      "eventDate_contact_promoter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstname": {
            "maxLength": 100,
            "type": "string"
          },
          "surname": {
            "maxLength": 100,
            "type": "string"
          },
          "email": {
            "maxLength": 255,
            "type": "string"
          },
          "phone": {
            "maxLength": 50,
            "type": "string"
          },
          "mobile": {
            "maxLength": 50,
            "type": "string"
          },
          "web": {
            "maxLength": 255,
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          }
        },
        "description": "Contact person for event date",
        "example": null
      },
      "location_contracts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstname": {
            "maxLength": 100,
            "type": "string"
          },
          "surname": {
            "maxLength": 100,
            "type": "string"
          },
          "email": {
            "maxLength": 255,
            "type": "string"
          },
          "phone": {
            "maxLength": 50,
            "type": "string"
          },
          "mobile": {
            "maxLength": 50,
            "type": "string"
          },
          "web": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "example": null
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}