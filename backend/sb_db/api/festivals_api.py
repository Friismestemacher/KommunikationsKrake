# coding: utf-8

"""
    Sommerblut-Database

    Event and festival info  # noqa: E501

    OpenAPI spec version: 1.5.0
    Contact: support@xtain.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sb_db.api_client import ApiClient


class FestivalsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_festival_years(self, **kwargs):  # noqa: E501
        """get all festival years  # noqa: E501

        get all festival years  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_festival_years(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: request specific language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_festival_years_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_festival_years_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_festival_years_with_http_info(self, **kwargs):  # noqa: E501
        """get all festival years  # noqa: E501

        get all festival years  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_festival_years_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept_language: request specific language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_festival_years" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/festivals/years.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_festivals(self, **kwargs):  # noqa: E501
        """get all festivals  # noqa: E501

        get all festivals without parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_festivals(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: returns festivals of the given year
        :param bool archive: returns all archived or not archived festivals (value 0 or 1)
        :param str accept_language: request specific language
        :return: Festivals
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_festivals_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_festivals_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_festivals_with_http_info(self, **kwargs):  # noqa: E501
        """get all festivals  # noqa: E501

        get all festivals without parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_festivals_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int year: returns festivals of the given year
        :param bool archive: returns all archived or not archived festivals (value 0 or 1)
        :param str accept_language: request specific language
        :return: Festivals
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'archive', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_festivals" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'archive' in params:
            query_params.append(('archive', params['archive']))  # noqa: E501

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'Language'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/festivals.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Festivals',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_festival_by_id(self, festival_id, **kwargs):  # noqa: E501
        """find festival by ID  # noqa: E501

        returns a single festival  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_festival_by_id(festival_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int festival_id: ID of festival to return (required)
        :param str accept_language: request specific language
        :return: Festival
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_festival_by_id_with_http_info(festival_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_festival_by_id_with_http_info(festival_id, **kwargs)  # noqa: E501
            return data

    def get_festival_by_id_with_http_info(self, festival_id, **kwargs):  # noqa: E501
        """find festival by ID  # noqa: E501

        returns a single festival  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_festival_by_id_with_http_info(festival_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int festival_id: ID of festival to return (required)
        :param str accept_language: request specific language
        :return: Festival
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['festival_id', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_festival_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'festival_id' is set
        if ('festival_id' not in params or
                params['festival_id'] is None):
            raise ValueError("Missing the required parameter `festival_id` when calling `get_festival_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'festival_id' in params:
            path_params['festivalId'] = params['festival_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/festivals/{festivalId}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Festival',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
