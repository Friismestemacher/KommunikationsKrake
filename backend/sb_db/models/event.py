# coding: utf-8

"""
    Sommerblut-Database

    Event and festival info  # noqa: E501

    OpenAPI spec version: 1.5.0
    Contact: support@xtain.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remark': 'str',
        'accessible_request_sommerblut': 'list[Accessibility]',
        'divergent_subtitle': 'str',
        'description_header_image': 'str',
        'photo_delivery_date': 'date',
        'festival': 'Festival',
        'audience_format': 'list[EventAudienceFormat]',
        'category': 'list[Category]',
        'event_dates': 'list[EventDate]',
        'photo_delivery': 'EventPhotoDelivery',
        'ensembles': 'list[EventEnsembles]',
        'missing_ensemble_positions': 'str',
        'next_date': 'EventNextDate',
        'min_date': 'EventNextDate',
        'productions_type': 'int',
        'show_reduced_date_list': 'bool',
        'is_locked': 'bool',
        'is_completely_translated': 'bool',
        'tags': 'list[Tag]',
        'streaming_player': 'str',
        'chat': 'str',
        'internal_notices': 'str',
        'logo_group1': 'str',
        'logo_group2': 'str',
        'logo_group3': 'str',
        'logo_group4': 'str',
        'logo_group5': 'str',
        'hide_event_dates': 'bool',
        'date_replacement': 'str',
        'event_images': 'str',
        'id': 'int',
        'health_infection_notice': 'str',
        'title': 'str',
        'substitle': 'str',
        'program_content': 'str',
        'info_text': 'str',
        'duration_minutes': 'int',
        'audience_format_other': 'str',
        'video_links': 'str',
        'fotografer_allowed': 'bool',
        'artist_name': 'str',
        'location_remark': 'str',
        'price_vvk': 'float',
        'price_vvk_reduced': 'float',
        'price_ak': 'float',
        'price_ak_reduced': 'float',
        'ticket_link': 'str',
        'max_capacity': 'int',
        'max_tickets_vvk': 'int',
        'info_tickets_vvk': 'str',
        'accessible_other': 'str',
        'evening_program': 'bool',
        'short_description': 'str',
        'social_media_info': 'str',
        'social_media_promoter': 'str',
        'location': 'Location',
        'ticket_proportions': 'bool',
        'price_handling': 'EventPriceHandling'
    }

    attribute_map = {
        'remark': 'remark',
        'accessible_request_sommerblut': 'accessible_request_sommerblut',
        'divergent_subtitle': 'divergent_subtitle',
        'description_header_image': 'description_header_image',
        'photo_delivery_date': 'photo_delivery_date',
        'festival': 'festival',
        'audience_format': 'audience_format',
        'category': 'category',
        'event_dates': 'event_dates',
        'photo_delivery': 'photo_delivery',
        'ensembles': 'ensembles',
        'missing_ensemble_positions': 'missing_ensemble_positions',
        'next_date': 'next_date',
        'min_date': 'min_date',
        'productions_type': 'productions_type',
        'show_reduced_date_list': 'show_reduced_date_list',
        'is_locked': 'is_locked',
        'is_completely_translated': 'is_completely_translated',
        'tags': 'tags',
        'streaming_player': 'streaming_player',
        'chat': 'chat',
        'internal_notices': 'internal_notices',
        'logo_group1': 'logo_group1',
        'logo_group2': 'logo_group2',
        'logo_group3': 'logo_group3',
        'logo_group4': 'logo_group4',
        'logo_group5': 'logo_group5',
        'hide_event_dates': 'hide_event_dates',
        'date_replacement': 'date_replacement',
        'event_images': 'event_images',
        'id': 'id',
        'health_infection_notice': 'health_infection_notice',
        'title': 'title',
        'substitle': 'substitle',
        'program_content': 'program_content',
        'info_text': 'info_text',
        'duration_minutes': 'duration_minutes',
        'audience_format_other': 'audience_format_other',
        'video_links': 'video_links',
        'fotografer_allowed': 'fotografer_allowed',
        'artist_name': 'artist_name',
        'location_remark': 'location_remark',
        'price_vvk': 'price_vvk',
        'price_vvk_reduced': 'price_vvk_reduced',
        'price_ak': 'price_ak',
        'price_ak_reduced': 'price_ak_reduced',
        'ticket_link': 'ticket_link',
        'max_capacity': 'max_capacity',
        'max_tickets_vvk': 'max_tickets_vvk',
        'info_tickets_vvk': 'info_tickets_vvk',
        'accessible_other': 'accessible_other',
        'evening_program': 'evening_program',
        'short_description': 'short_description',
        'social_media_info': 'social_media_info',
        'social_media_promoter': 'social_media_promoter',
        'location': 'location',
        'ticket_proportions': 'ticket_proportions',
        'price_handling': 'price_handling'
    }

    def __init__(self, remark=None, accessible_request_sommerblut=None, divergent_subtitle=None, description_header_image=None, photo_delivery_date=None, festival=None, audience_format=None, category=None, event_dates=None, photo_delivery=None, ensembles=None, missing_ensemble_positions=None, next_date=None, min_date=None, productions_type=None, show_reduced_date_list=None, is_locked=None, is_completely_translated=None, tags=None, streaming_player=None, chat=None, internal_notices=None, logo_group1=None, logo_group2=None, logo_group3=None, logo_group4=None, logo_group5=None, hide_event_dates=None, date_replacement=None, event_images=None, id=None, health_infection_notice=None, title=None, substitle=None, program_content=None, info_text=None, duration_minutes=None, audience_format_other=None, video_links=None, fotografer_allowed=None, artist_name=None, location_remark=None, price_vvk=None, price_vvk_reduced=None, price_ak=None, price_ak_reduced=None, ticket_link=None, max_capacity=None, max_tickets_vvk=None, info_tickets_vvk=None, accessible_other=None, evening_program=None, short_description=None, social_media_info=None, social_media_promoter=None, location=None, ticket_proportions=None, price_handling=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._remark = None
        self._accessible_request_sommerblut = None
        self._divergent_subtitle = None
        self._description_header_image = None
        self._photo_delivery_date = None
        self._festival = None
        self._audience_format = None
        self._category = None
        self._event_dates = None
        self._photo_delivery = None
        self._ensembles = None
        self._missing_ensemble_positions = None
        self._next_date = None
        self._min_date = None
        self._productions_type = None
        self._show_reduced_date_list = None
        self._is_locked = None
        self._is_completely_translated = None
        self._tags = None
        self._streaming_player = None
        self._chat = None
        self._internal_notices = None
        self._logo_group1 = None
        self._logo_group2 = None
        self._logo_group3 = None
        self._logo_group4 = None
        self._logo_group5 = None
        self._hide_event_dates = None
        self._date_replacement = None
        self._event_images = None
        self._id = None
        self._health_infection_notice = None
        self._title = None
        self._substitle = None
        self._program_content = None
        self._info_text = None
        self._duration_minutes = None
        self._audience_format_other = None
        self._video_links = None
        self._fotografer_allowed = None
        self._artist_name = None
        self._location_remark = None
        self._price_vvk = None
        self._price_vvk_reduced = None
        self._price_ak = None
        self._price_ak_reduced = None
        self._ticket_link = None
        self._max_capacity = None
        self._max_tickets_vvk = None
        self._info_tickets_vvk = None
        self._accessible_other = None
        self._evening_program = None
        self._short_description = None
        self._social_media_info = None
        self._social_media_promoter = None
        self._location = None
        self._ticket_proportions = None
        self._price_handling = None
        self.discriminator = None
        if remark is not None:
            self.remark = remark
        if accessible_request_sommerblut is not None:
            self.accessible_request_sommerblut = accessible_request_sommerblut
        if divergent_subtitle is not None:
            self.divergent_subtitle = divergent_subtitle
        if description_header_image is not None:
            self.description_header_image = description_header_image
        if photo_delivery_date is not None:
            self.photo_delivery_date = photo_delivery_date
        if festival is not None:
            self.festival = festival
        if audience_format is not None:
            self.audience_format = audience_format
        if category is not None:
            self.category = category
        if event_dates is not None:
            self.event_dates = event_dates
        if photo_delivery is not None:
            self.photo_delivery = photo_delivery
        if ensembles is not None:
            self.ensembles = ensembles
        if missing_ensemble_positions is not None:
            self.missing_ensemble_positions = missing_ensemble_positions
        if next_date is not None:
            self.next_date = next_date
        if min_date is not None:
            self.min_date = min_date
        if productions_type is not None:
            self.productions_type = productions_type
        if show_reduced_date_list is not None:
            self.show_reduced_date_list = show_reduced_date_list
        if is_locked is not None:
            self.is_locked = is_locked
        if is_completely_translated is not None:
            self.is_completely_translated = is_completely_translated
        if tags is not None:
            self.tags = tags
        if streaming_player is not None:
            self.streaming_player = streaming_player
        if chat is not None:
            self.chat = chat
        if internal_notices is not None:
            self.internal_notices = internal_notices
        if logo_group1 is not None:
            self.logo_group1 = logo_group1
        if logo_group2 is not None:
            self.logo_group2 = logo_group2
        if logo_group3 is not None:
            self.logo_group3 = logo_group3
        if logo_group4 is not None:
            self.logo_group4 = logo_group4
        if logo_group5 is not None:
            self.logo_group5 = logo_group5
        if hide_event_dates is not None:
            self.hide_event_dates = hide_event_dates
        if date_replacement is not None:
            self.date_replacement = date_replacement
        if event_images is not None:
            self.event_images = event_images
        if id is not None:
            self.id = id
        if health_infection_notice is not None:
            self.health_infection_notice = health_infection_notice
        if title is not None:
            self.title = title
        if substitle is not None:
            self.substitle = substitle
        if program_content is not None:
            self.program_content = program_content
        if info_text is not None:
            self.info_text = info_text
        if duration_minutes is not None:
            self.duration_minutes = duration_minutes
        if audience_format_other is not None:
            self.audience_format_other = audience_format_other
        if video_links is not None:
            self.video_links = video_links
        if fotografer_allowed is not None:
            self.fotografer_allowed = fotografer_allowed
        if artist_name is not None:
            self.artist_name = artist_name
        if location_remark is not None:
            self.location_remark = location_remark
        if price_vvk is not None:
            self.price_vvk = price_vvk
        if price_vvk_reduced is not None:
            self.price_vvk_reduced = price_vvk_reduced
        if price_ak is not None:
            self.price_ak = price_ak
        if price_ak_reduced is not None:
            self.price_ak_reduced = price_ak_reduced
        if ticket_link is not None:
            self.ticket_link = ticket_link
        if max_capacity is not None:
            self.max_capacity = max_capacity
        if max_tickets_vvk is not None:
            self.max_tickets_vvk = max_tickets_vvk
        if info_tickets_vvk is not None:
            self.info_tickets_vvk = info_tickets_vvk
        if accessible_other is not None:
            self.accessible_other = accessible_other
        if evening_program is not None:
            self.evening_program = evening_program
        if short_description is not None:
            self.short_description = short_description
        if social_media_info is not None:
            self.social_media_info = social_media_info
        if social_media_promoter is not None:
            self.social_media_promoter = social_media_promoter
        if location is not None:
            self.location = location
        if ticket_proportions is not None:
            self.ticket_proportions = ticket_proportions
        if price_handling is not None:
            self.price_handling = price_handling

    @property
    def remark(self):
        """Gets the remark of this Event.  # noqa: E501

        Additional infos about the event  # noqa: E501

        :return: The remark of this Event.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this Event.

        Additional infos about the event  # noqa: E501

        :param remark: The remark of this Event.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def accessible_request_sommerblut(self):
        """Gets the accessible_request_sommerblut of this Event.  # noqa: E501

        Accessibility options  # noqa: E501

        :return: The accessible_request_sommerblut of this Event.  # noqa: E501
        :rtype: list[Accessibility]
        """
        return self._accessible_request_sommerblut

    @accessible_request_sommerblut.setter
    def accessible_request_sommerblut(self, accessible_request_sommerblut):
        """Sets the accessible_request_sommerblut of this Event.

        Accessibility options  # noqa: E501

        :param accessible_request_sommerblut: The accessible_request_sommerblut of this Event.  # noqa: E501
        :type: list[Accessibility]
        """

        self._accessible_request_sommerblut = accessible_request_sommerblut

    @property
    def divergent_subtitle(self):
        """Gets the divergent_subtitle of this Event.  # noqa: E501

        Divergent subtitle  # noqa: E501

        :return: The divergent_subtitle of this Event.  # noqa: E501
        :rtype: str
        """
        return self._divergent_subtitle

    @divergent_subtitle.setter
    def divergent_subtitle(self, divergent_subtitle):
        """Sets the divergent_subtitle of this Event.

        Divergent subtitle  # noqa: E501

        :param divergent_subtitle: The divergent_subtitle of this Event.  # noqa: E501
        :type: str
        """

        self._divergent_subtitle = divergent_subtitle

    @property
    def description_header_image(self):
        """Gets the description_header_image of this Event.  # noqa: E501


        :return: The description_header_image of this Event.  # noqa: E501
        :rtype: str
        """
        return self._description_header_image

    @description_header_image.setter
    def description_header_image(self, description_header_image):
        """Sets the description_header_image of this Event.


        :param description_header_image: The description_header_image of this Event.  # noqa: E501
        :type: str
        """

        self._description_header_image = description_header_image

    @property
    def photo_delivery_date(self):
        """Gets the photo_delivery_date of this Event.  # noqa: E501

        Date of photo delivery  # noqa: E501

        :return: The photo_delivery_date of this Event.  # noqa: E501
        :rtype: date
        """
        return self._photo_delivery_date

    @photo_delivery_date.setter
    def photo_delivery_date(self, photo_delivery_date):
        """Sets the photo_delivery_date of this Event.

        Date of photo delivery  # noqa: E501

        :param photo_delivery_date: The photo_delivery_date of this Event.  # noqa: E501
        :type: date
        """

        self._photo_delivery_date = photo_delivery_date

    @property
    def festival(self):
        """Gets the festival of this Event.  # noqa: E501


        :return: The festival of this Event.  # noqa: E501
        :rtype: Festival
        """
        return self._festival

    @festival.setter
    def festival(self, festival):
        """Sets the festival of this Event.


        :param festival: The festival of this Event.  # noqa: E501
        :type: Festival
        """

        self._festival = festival

    @property
    def audience_format(self):
        """Gets the audience_format of this Event.  # noqa: E501

        Audience format  # noqa: E501

        :return: The audience_format of this Event.  # noqa: E501
        :rtype: list[EventAudienceFormat]
        """
        return self._audience_format

    @audience_format.setter
    def audience_format(self, audience_format):
        """Sets the audience_format of this Event.

        Audience format  # noqa: E501

        :param audience_format: The audience_format of this Event.  # noqa: E501
        :type: list[EventAudienceFormat]
        """

        self._audience_format = audience_format

    @property
    def category(self):
        """Gets the category of this Event.  # noqa: E501

        All categories/genres of the event  # noqa: E501

        :return: The category of this Event.  # noqa: E501
        :rtype: list[Category]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Event.

        All categories/genres of the event  # noqa: E501

        :param category: The category of this Event.  # noqa: E501
        :type: list[Category]
        """

        self._category = category

    @property
    def event_dates(self):
        """Gets the event_dates of this Event.  # noqa: E501

        All event dates of the event  # noqa: E501

        :return: The event_dates of this Event.  # noqa: E501
        :rtype: list[EventDate]
        """
        return self._event_dates

    @event_dates.setter
    def event_dates(self, event_dates):
        """Sets the event_dates of this Event.

        All event dates of the event  # noqa: E501

        :param event_dates: The event_dates of this Event.  # noqa: E501
        :type: list[EventDate]
        """

        self._event_dates = event_dates

    @property
    def photo_delivery(self):
        """Gets the photo_delivery of this Event.  # noqa: E501


        :return: The photo_delivery of this Event.  # noqa: E501
        :rtype: EventPhotoDelivery
        """
        return self._photo_delivery

    @photo_delivery.setter
    def photo_delivery(self, photo_delivery):
        """Sets the photo_delivery of this Event.


        :param photo_delivery: The photo_delivery of this Event.  # noqa: E501
        :type: EventPhotoDelivery
        """

        self._photo_delivery = photo_delivery

    @property
    def ensembles(self):
        """Gets the ensembles of this Event.  # noqa: E501

        List of persons in ensembles  # noqa: E501

        :return: The ensembles of this Event.  # noqa: E501
        :rtype: list[EventEnsembles]
        """
        return self._ensembles

    @ensembles.setter
    def ensembles(self, ensembles):
        """Sets the ensembles of this Event.

        List of persons in ensembles  # noqa: E501

        :param ensembles: The ensembles of this Event.  # noqa: E501
        :type: list[EventEnsembles]
        """

        self._ensembles = ensembles

    @property
    def missing_ensemble_positions(self):
        """Gets the missing_ensemble_positions of this Event.  # noqa: E501

        Field for missing ensemble function  # noqa: E501

        :return: The missing_ensemble_positions of this Event.  # noqa: E501
        :rtype: str
        """
        return self._missing_ensemble_positions

    @missing_ensemble_positions.setter
    def missing_ensemble_positions(self, missing_ensemble_positions):
        """Sets the missing_ensemble_positions of this Event.

        Field for missing ensemble function  # noqa: E501

        :param missing_ensemble_positions: The missing_ensemble_positions of this Event.  # noqa: E501
        :type: str
        """

        self._missing_ensemble_positions = missing_ensemble_positions

    @property
    def next_date(self):
        """Gets the next_date of this Event.  # noqa: E501


        :return: The next_date of this Event.  # noqa: E501
        :rtype: EventNextDate
        """
        return self._next_date

    @next_date.setter
    def next_date(self, next_date):
        """Sets the next_date of this Event.


        :param next_date: The next_date of this Event.  # noqa: E501
        :type: EventNextDate
        """

        self._next_date = next_date

    @property
    def min_date(self):
        """Gets the min_date of this Event.  # noqa: E501


        :return: The min_date of this Event.  # noqa: E501
        :rtype: EventNextDate
        """
        return self._min_date

    @min_date.setter
    def min_date(self, min_date):
        """Sets the min_date of this Event.


        :param min_date: The min_date of this Event.  # noqa: E501
        :type: EventNextDate
        """

        self._min_date = min_date

    @property
    def productions_type(self):
        """Gets the productions_type of this Event.  # noqa: E501

        Production type  # noqa: E501

        :return: The productions_type of this Event.  # noqa: E501
        :rtype: int
        """
        return self._productions_type

    @productions_type.setter
    def productions_type(self, productions_type):
        """Sets the productions_type of this Event.

        Production type  # noqa: E501

        :param productions_type: The productions_type of this Event.  # noqa: E501
        :type: int
        """

        self._productions_type = productions_type

    @property
    def show_reduced_date_list(self):
        """Gets the show_reduced_date_list of this Event.  # noqa: E501

        Show one event list for all dates  # noqa: E501

        :return: The show_reduced_date_list of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._show_reduced_date_list

    @show_reduced_date_list.setter
    def show_reduced_date_list(self, show_reduced_date_list):
        """Sets the show_reduced_date_list of this Event.

        Show one event list for all dates  # noqa: E501

        :param show_reduced_date_list: The show_reduced_date_list of this Event.  # noqa: E501
        :type: bool
        """

        self._show_reduced_date_list = show_reduced_date_list

    @property
    def is_locked(self):
        """Gets the is_locked of this Event.  # noqa: E501

        Locked for edit  # noqa: E501

        :return: The is_locked of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this Event.

        Locked for edit  # noqa: E501

        :param is_locked: The is_locked of this Event.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def is_completely_translated(self):
        """Gets the is_completely_translated of this Event.  # noqa: E501

        A placeholder should be placed for the translations, if this is marked as false  # noqa: E501

        :return: The is_completely_translated of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._is_completely_translated

    @is_completely_translated.setter
    def is_completely_translated(self, is_completely_translated):
        """Sets the is_completely_translated of this Event.

        A placeholder should be placed for the translations, if this is marked as false  # noqa: E501

        :param is_completely_translated: The is_completely_translated of this Event.  # noqa: E501
        :type: bool
        """

        self._is_completely_translated = is_completely_translated

    @property
    def tags(self):
        """Gets the tags of this Event.  # noqa: E501

        Tags  # noqa: E501

        :return: The tags of this Event.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Event.

        Tags  # noqa: E501

        :param tags: The tags of this Event.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def streaming_player(self):
        """Gets the streaming_player of this Event.  # noqa: E501

        Streaming player  # noqa: E501

        :return: The streaming_player of this Event.  # noqa: E501
        :rtype: str
        """
        return self._streaming_player

    @streaming_player.setter
    def streaming_player(self, streaming_player):
        """Sets the streaming_player of this Event.

        Streaming player  # noqa: E501

        :param streaming_player: The streaming_player of this Event.  # noqa: E501
        :type: str
        """

        self._streaming_player = streaming_player

    @property
    def chat(self):
        """Gets the chat of this Event.  # noqa: E501

        Chat  # noqa: E501

        :return: The chat of this Event.  # noqa: E501
        :rtype: str
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this Event.

        Chat  # noqa: E501

        :param chat: The chat of this Event.  # noqa: E501
        :type: str
        """

        self._chat = chat

    @property
    def internal_notices(self):
        """Gets the internal_notices of this Event.  # noqa: E501

        Internal remark  # noqa: E501

        :return: The internal_notices of this Event.  # noqa: E501
        :rtype: str
        """
        return self._internal_notices

    @internal_notices.setter
    def internal_notices(self, internal_notices):
        """Sets the internal_notices of this Event.

        Internal remark  # noqa: E501

        :param internal_notices: The internal_notices of this Event.  # noqa: E501
        :type: str
        """

        self._internal_notices = internal_notices

    @property
    def logo_group1(self):
        """Gets the logo_group1 of this Event.  # noqa: E501

        Logo group 1  # noqa: E501

        :return: The logo_group1 of this Event.  # noqa: E501
        :rtype: str
        """
        return self._logo_group1

    @logo_group1.setter
    def logo_group1(self, logo_group1):
        """Sets the logo_group1 of this Event.

        Logo group 1  # noqa: E501

        :param logo_group1: The logo_group1 of this Event.  # noqa: E501
        :type: str
        """

        self._logo_group1 = logo_group1

    @property
    def logo_group2(self):
        """Gets the logo_group2 of this Event.  # noqa: E501

        Logo group 2  # noqa: E501

        :return: The logo_group2 of this Event.  # noqa: E501
        :rtype: str
        """
        return self._logo_group2

    @logo_group2.setter
    def logo_group2(self, logo_group2):
        """Sets the logo_group2 of this Event.

        Logo group 2  # noqa: E501

        :param logo_group2: The logo_group2 of this Event.  # noqa: E501
        :type: str
        """

        self._logo_group2 = logo_group2

    @property
    def logo_group3(self):
        """Gets the logo_group3 of this Event.  # noqa: E501

        Logo group 3  # noqa: E501

        :return: The logo_group3 of this Event.  # noqa: E501
        :rtype: str
        """
        return self._logo_group3

    @logo_group3.setter
    def logo_group3(self, logo_group3):
        """Sets the logo_group3 of this Event.

        Logo group 3  # noqa: E501

        :param logo_group3: The logo_group3 of this Event.  # noqa: E501
        :type: str
        """

        self._logo_group3 = logo_group3

    @property
    def logo_group4(self):
        """Gets the logo_group4 of this Event.  # noqa: E501

        Logo group 4  # noqa: E501

        :return: The logo_group4 of this Event.  # noqa: E501
        :rtype: str
        """
        return self._logo_group4

    @logo_group4.setter
    def logo_group4(self, logo_group4):
        """Sets the logo_group4 of this Event.

        Logo group 4  # noqa: E501

        :param logo_group4: The logo_group4 of this Event.  # noqa: E501
        :type: str
        """

        self._logo_group4 = logo_group4

    @property
    def logo_group5(self):
        """Gets the logo_group5 of this Event.  # noqa: E501

        Logo group 5  # noqa: E501

        :return: The logo_group5 of this Event.  # noqa: E501
        :rtype: str
        """
        return self._logo_group5

    @logo_group5.setter
    def logo_group5(self, logo_group5):
        """Sets the logo_group5 of this Event.

        Logo group 5  # noqa: E501

        :param logo_group5: The logo_group5 of this Event.  # noqa: E501
        :type: str
        """

        self._logo_group5 = logo_group5

    @property
    def hide_event_dates(self):
        """Gets the hide_event_dates of this Event.  # noqa: E501

        Hide event dates  # noqa: E501

        :return: The hide_event_dates of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._hide_event_dates

    @hide_event_dates.setter
    def hide_event_dates(self, hide_event_dates):
        """Sets the hide_event_dates of this Event.

        Hide event dates  # noqa: E501

        :param hide_event_dates: The hide_event_dates of this Event.  # noqa: E501
        :type: bool
        """

        self._hide_event_dates = hide_event_dates

    @property
    def date_replacement(self):
        """Gets the date_replacement of this Event.  # noqa: E501

        Text replacement for event date  # noqa: E501

        :return: The date_replacement of this Event.  # noqa: E501
        :rtype: str
        """
        return self._date_replacement

    @date_replacement.setter
    def date_replacement(self, date_replacement):
        """Sets the date_replacement of this Event.

        Text replacement for event date  # noqa: E501

        :param date_replacement: The date_replacement of this Event.  # noqa: E501
        :type: str
        """

        self._date_replacement = date_replacement

    @property
    def event_images(self):
        """Gets the event_images of this Event.  # noqa: E501

        Event images  # noqa: E501

        :return: The event_images of this Event.  # noqa: E501
        :rtype: str
        """
        return self._event_images

    @event_images.setter
    def event_images(self, event_images):
        """Sets the event_images of this Event.

        Event images  # noqa: E501

        :param event_images: The event_images of this Event.  # noqa: E501
        :type: str
        """

        self._event_images = event_images

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def health_infection_notice(self):
        """Gets the health_infection_notice of this Event.  # noqa: E501

        Covid Info for chatbot  # noqa: E501

        :return: The health_infection_notice of this Event.  # noqa: E501
        :rtype: str
        """
        return self._health_infection_notice

    @health_infection_notice.setter
    def health_infection_notice(self, health_infection_notice):
        """Sets the health_infection_notice of this Event.

        Covid Info for chatbot  # noqa: E501

        :param health_infection_notice: The health_infection_notice of this Event.  # noqa: E501
        :type: str
        """

        self._health_infection_notice = health_infection_notice

    @property
    def title(self):
        """Gets the title of this Event.  # noqa: E501


        :return: The title of this Event.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.


        :param title: The title of this Event.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def substitle(self):
        """Gets the substitle of this Event.  # noqa: E501


        :return: The substitle of this Event.  # noqa: E501
        :rtype: str
        """
        return self._substitle

    @substitle.setter
    def substitle(self, substitle):
        """Sets the substitle of this Event.


        :param substitle: The substitle of this Event.  # noqa: E501
        :type: str
        """

        self._substitle = substitle

    @property
    def program_content(self):
        """Gets the program_content of this Event.  # noqa: E501

        Program content  # noqa: E501

        :return: The program_content of this Event.  # noqa: E501
        :rtype: str
        """
        return self._program_content

    @program_content.setter
    def program_content(self, program_content):
        """Sets the program_content of this Event.

        Program content  # noqa: E501

        :param program_content: The program_content of this Event.  # noqa: E501
        :type: str
        """

        self._program_content = program_content

    @property
    def info_text(self):
        """Gets the info_text of this Event.  # noqa: E501

        Internal notices  # noqa: E501

        :return: The info_text of this Event.  # noqa: E501
        :rtype: str
        """
        return self._info_text

    @info_text.setter
    def info_text(self, info_text):
        """Sets the info_text of this Event.

        Internal notices  # noqa: E501

        :param info_text: The info_text of this Event.  # noqa: E501
        :type: str
        """

        self._info_text = info_text

    @property
    def duration_minutes(self):
        """Gets the duration_minutes of this Event.  # noqa: E501

        Duration in minutes  # noqa: E501

        :return: The duration_minutes of this Event.  # noqa: E501
        :rtype: int
        """
        return self._duration_minutes

    @duration_minutes.setter
    def duration_minutes(self, duration_minutes):
        """Sets the duration_minutes of this Event.

        Duration in minutes  # noqa: E501

        :param duration_minutes: The duration_minutes of this Event.  # noqa: E501
        :type: int
        """

        self._duration_minutes = duration_minutes

    @property
    def audience_format_other(self):
        """Gets the audience_format_other of this Event.  # noqa: E501

        Other audience format  # noqa: E501

        :return: The audience_format_other of this Event.  # noqa: E501
        :rtype: str
        """
        return self._audience_format_other

    @audience_format_other.setter
    def audience_format_other(self, audience_format_other):
        """Sets the audience_format_other of this Event.

        Other audience format  # noqa: E501

        :param audience_format_other: The audience_format_other of this Event.  # noqa: E501
        :type: str
        """

        self._audience_format_other = audience_format_other

    @property
    def video_links(self):
        """Gets the video_links of this Event.  # noqa: E501

        Video links  # noqa: E501

        :return: The video_links of this Event.  # noqa: E501
        :rtype: str
        """
        return self._video_links

    @video_links.setter
    def video_links(self, video_links):
        """Sets the video_links of this Event.

        Video links  # noqa: E501

        :param video_links: The video_links of this Event.  # noqa: E501
        :type: str
        """

        self._video_links = video_links

    @property
    def fotografer_allowed(self):
        """Gets the fotografer_allowed of this Event.  # noqa: E501

        Is a fotografer allowed at the event  # noqa: E501

        :return: The fotografer_allowed of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._fotografer_allowed

    @fotografer_allowed.setter
    def fotografer_allowed(self, fotografer_allowed):
        """Sets the fotografer_allowed of this Event.

        Is a fotografer allowed at the event  # noqa: E501

        :param fotografer_allowed: The fotografer_allowed of this Event.  # noqa: E501
        :type: bool
        """

        self._fotografer_allowed = fotografer_allowed

    @property
    def artist_name(self):
        """Gets the artist_name of this Event.  # noqa: E501

        Name of Artist  # noqa: E501

        :return: The artist_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._artist_name

    @artist_name.setter
    def artist_name(self, artist_name):
        """Sets the artist_name of this Event.

        Name of Artist  # noqa: E501

        :param artist_name: The artist_name of this Event.  # noqa: E501
        :type: str
        """

        self._artist_name = artist_name

    @property
    def location_remark(self):
        """Gets the location_remark of this Event.  # noqa: E501

        PR / Social Media  # noqa: E501

        :return: The location_remark of this Event.  # noqa: E501
        :rtype: str
        """
        return self._location_remark

    @location_remark.setter
    def location_remark(self, location_remark):
        """Sets the location_remark of this Event.

        PR / Social Media  # noqa: E501

        :param location_remark: The location_remark of this Event.  # noqa: E501
        :type: str
        """

        self._location_remark = location_remark

    @property
    def price_vvk(self):
        """Gets the price_vvk of this Event.  # noqa: E501

        Price pre sale  # noqa: E501

        :return: The price_vvk of this Event.  # noqa: E501
        :rtype: float
        """
        return self._price_vvk

    @price_vvk.setter
    def price_vvk(self, price_vvk):
        """Sets the price_vvk of this Event.

        Price pre sale  # noqa: E501

        :param price_vvk: The price_vvk of this Event.  # noqa: E501
        :type: float
        """

        self._price_vvk = price_vvk

    @property
    def price_vvk_reduced(self):
        """Gets the price_vvk_reduced of this Event.  # noqa: E501

        Reduced price pre sale  # noqa: E501

        :return: The price_vvk_reduced of this Event.  # noqa: E501
        :rtype: float
        """
        return self._price_vvk_reduced

    @price_vvk_reduced.setter
    def price_vvk_reduced(self, price_vvk_reduced):
        """Sets the price_vvk_reduced of this Event.

        Reduced price pre sale  # noqa: E501

        :param price_vvk_reduced: The price_vvk_reduced of this Event.  # noqa: E501
        :type: float
        """

        self._price_vvk_reduced = price_vvk_reduced

    @property
    def price_ak(self):
        """Gets the price_ak of this Event.  # noqa: E501

        Price box office  # noqa: E501

        :return: The price_ak of this Event.  # noqa: E501
        :rtype: float
        """
        return self._price_ak

    @price_ak.setter
    def price_ak(self, price_ak):
        """Sets the price_ak of this Event.

        Price box office  # noqa: E501

        :param price_ak: The price_ak of this Event.  # noqa: E501
        :type: float
        """

        self._price_ak = price_ak

    @property
    def price_ak_reduced(self):
        """Gets the price_ak_reduced of this Event.  # noqa: E501

        Reduced price box office  # noqa: E501

        :return: The price_ak_reduced of this Event.  # noqa: E501
        :rtype: float
        """
        return self._price_ak_reduced

    @price_ak_reduced.setter
    def price_ak_reduced(self, price_ak_reduced):
        """Sets the price_ak_reduced of this Event.

        Reduced price box office  # noqa: E501

        :param price_ak_reduced: The price_ak_reduced of this Event.  # noqa: E501
        :type: float
        """

        self._price_ak_reduced = price_ak_reduced

    @property
    def ticket_link(self):
        """Gets the ticket_link of this Event.  # noqa: E501

        Link to the ticket shop  # noqa: E501

        :return: The ticket_link of this Event.  # noqa: E501
        :rtype: str
        """
        return self._ticket_link

    @ticket_link.setter
    def ticket_link(self, ticket_link):
        """Sets the ticket_link of this Event.

        Link to the ticket shop  # noqa: E501

        :param ticket_link: The ticket_link of this Event.  # noqa: E501
        :type: str
        """

        self._ticket_link = ticket_link

    @property
    def max_capacity(self):
        """Gets the max_capacity of this Event.  # noqa: E501

        Maximum capacity  # noqa: E501

        :return: The max_capacity of this Event.  # noqa: E501
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this Event.

        Maximum capacity  # noqa: E501

        :param max_capacity: The max_capacity of this Event.  # noqa: E501
        :type: int
        """

        self._max_capacity = max_capacity

    @property
    def max_tickets_vvk(self):
        """Gets the max_tickets_vvk of this Event.  # noqa: E501

        Maximum of pre sale tickets  # noqa: E501

        :return: The max_tickets_vvk of this Event.  # noqa: E501
        :rtype: int
        """
        return self._max_tickets_vvk

    @max_tickets_vvk.setter
    def max_tickets_vvk(self, max_tickets_vvk):
        """Sets the max_tickets_vvk of this Event.

        Maximum of pre sale tickets  # noqa: E501

        :param max_tickets_vvk: The max_tickets_vvk of this Event.  # noqa: E501
        :type: int
        """

        self._max_tickets_vvk = max_tickets_vvk

    @property
    def info_tickets_vvk(self):
        """Gets the info_tickets_vvk of this Event.  # noqa: E501

        Additional ticketing info  # noqa: E501

        :return: The info_tickets_vvk of this Event.  # noqa: E501
        :rtype: str
        """
        return self._info_tickets_vvk

    @info_tickets_vvk.setter
    def info_tickets_vvk(self, info_tickets_vvk):
        """Sets the info_tickets_vvk of this Event.

        Additional ticketing info  # noqa: E501

        :param info_tickets_vvk: The info_tickets_vvk of this Event.  # noqa: E501
        :type: str
        """

        self._info_tickets_vvk = info_tickets_vvk

    @property
    def accessible_other(self):
        """Gets the accessible_other of this Event.  # noqa: E501

        accessible notice for chatbot in language ls  # noqa: E501

        :return: The accessible_other of this Event.  # noqa: E501
        :rtype: str
        """
        return self._accessible_other

    @accessible_other.setter
    def accessible_other(self, accessible_other):
        """Sets the accessible_other of this Event.

        accessible notice for chatbot in language ls  # noqa: E501

        :param accessible_other: The accessible_other of this Event.  # noqa: E501
        :type: str
        """

        self._accessible_other = accessible_other

    @property
    def evening_program(self):
        """Gets the evening_program of this Event.  # noqa: E501

        Programm sheet  # noqa: E501

        :return: The evening_program of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._evening_program

    @evening_program.setter
    def evening_program(self, evening_program):
        """Sets the evening_program of this Event.

        Programm sheet  # noqa: E501

        :param evening_program: The evening_program of this Event.  # noqa: E501
        :type: bool
        """

        self._evening_program = evening_program

    @property
    def short_description(self):
        """Gets the short_description of this Event.  # noqa: E501

        Short description  # noqa: E501

        :return: The short_description of this Event.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Event.

        Short description  # noqa: E501

        :param short_description: The short_description of this Event.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def social_media_info(self):
        """Gets the social_media_info of this Event.  # noqa: E501

        Social media channels (e.g. YouTube) from artists  # noqa: E501

        :return: The social_media_info of this Event.  # noqa: E501
        :rtype: str
        """
        return self._social_media_info

    @social_media_info.setter
    def social_media_info(self, social_media_info):
        """Sets the social_media_info of this Event.

        Social media channels (e.g. YouTube) from artists  # noqa: E501

        :param social_media_info: The social_media_info of this Event.  # noqa: E501
        :type: str
        """

        self._social_media_info = social_media_info

    @property
    def social_media_promoter(self):
        """Gets the social_media_promoter of this Event.  # noqa: E501

        Social media channels (e.g. YouTube) from location  # noqa: E501

        :return: The social_media_promoter of this Event.  # noqa: E501
        :rtype: str
        """
        return self._social_media_promoter

    @social_media_promoter.setter
    def social_media_promoter(self, social_media_promoter):
        """Sets the social_media_promoter of this Event.

        Social media channels (e.g. YouTube) from location  # noqa: E501

        :param social_media_promoter: The social_media_promoter of this Event.  # noqa: E501
        :type: str
        """

        self._social_media_promoter = social_media_promoter

    @property
    def location(self):
        """Gets the location of this Event.  # noqa: E501


        :return: The location of this Event.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Event.


        :param location: The location of this Event.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def ticket_proportions(self):
        """Gets the ticket_proportions of this Event.  # noqa: E501

        Consent to ticket proportions  # noqa: E501

        :return: The ticket_proportions of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._ticket_proportions

    @ticket_proportions.setter
    def ticket_proportions(self, ticket_proportions):
        """Sets the ticket_proportions of this Event.

        Consent to ticket proportions  # noqa: E501

        :param ticket_proportions: The ticket_proportions of this Event.  # noqa: E501
        :type: bool
        """

        self._ticket_proportions = ticket_proportions

    @property
    def price_handling(self):
        """Gets the price_handling of this Event.  # noqa: E501


        :return: The price_handling of this Event.  # noqa: E501
        :rtype: EventPriceHandling
        """
        return self._price_handling

    @price_handling.setter
    def price_handling(self, price_handling):
        """Sets the price_handling of this Event.


        :param price_handling: The price_handling of this Event.  # noqa: E501
        :type: EventPriceHandling
        """

        self._price_handling = price_handling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
