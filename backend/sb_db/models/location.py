# coding: utf-8

"""
    Sommerblut-Database

    Event and festival info  # noqa: E501

    OpenAPI spec version: 1.5.0
    Contact: support@xtain.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'street': 'str',
        'number': 'int',
        'postal': 'int',
        'city': 'str',
        'country': 'str',
        'contracts': 'list[LocationContracts]',
        'hints': 'str',
        'name': 'str',
        'accessible_request': 'str',
        'accessible_request_object': 'list[Accessibility]',
        'location_group': 'LocationGroup',
        'direction_description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'street': 'street',
        'number': 'number',
        'postal': 'postal',
        'city': 'city',
        'country': 'country',
        'contracts': 'contracts',
        'hints': 'hints',
        'name': 'name',
        'accessible_request': 'accessible_request',
        'accessible_request_object': 'accessible_request_object',
        'location_group': 'location_group',
        'direction_description': 'direction_description'
    }

    def __init__(self, id=None, street=None, number=None, postal=None, city=None, country=None, contracts=None, hints=None, name=None, accessible_request=None, accessible_request_object=None, location_group=None, direction_description=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._street = None
        self._number = None
        self._postal = None
        self._city = None
        self._country = None
        self._contracts = None
        self._hints = None
        self._name = None
        self._accessible_request = None
        self._accessible_request_object = None
        self._location_group = None
        self._direction_description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if street is not None:
            self.street = street
        if number is not None:
            self.number = number
        if postal is not None:
            self.postal = postal
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if contracts is not None:
            self.contracts = contracts
        if hints is not None:
            self.hints = hints
        if name is not None:
            self.name = name
        if accessible_request is not None:
            self.accessible_request = accessible_request
        if accessible_request_object is not None:
            self.accessible_request_object = accessible_request_object
        if location_group is not None:
            self.location_group = location_group
        if direction_description is not None:
            self.direction_description = direction_description

    @property
    def id(self):
        """Gets the id of this Location.  # noqa: E501


        :return: The id of this Location.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.


        :param id: The id of this Location.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def street(self):
        """Gets the street of this Location.  # noqa: E501


        :return: The street of this Location.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Location.


        :param street: The street of this Location.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def number(self):
        """Gets the number of this Location.  # noqa: E501


        :return: The number of this Location.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Location.


        :param number: The number of this Location.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def postal(self):
        """Gets the postal of this Location.  # noqa: E501


        :return: The postal of this Location.  # noqa: E501
        :rtype: int
        """
        return self._postal

    @postal.setter
    def postal(self, postal):
        """Sets the postal of this Location.


        :param postal: The postal of this Location.  # noqa: E501
        :type: int
        """

        self._postal = postal

    @property
    def city(self):
        """Gets the city of this Location.  # noqa: E501


        :return: The city of this Location.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.


        :param city: The city of this Location.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Location.  # noqa: E501


        :return: The country of this Location.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location.


        :param country: The country of this Location.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def contracts(self):
        """Gets the contracts of this Location.  # noqa: E501


        :return: The contracts of this Location.  # noqa: E501
        :rtype: list[LocationContracts]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this Location.


        :param contracts: The contracts of this Location.  # noqa: E501
        :type: list[LocationContracts]
        """

        self._contracts = contracts

    @property
    def hints(self):
        """Gets the hints of this Location.  # noqa: E501

        notice  # noqa: E501

        :return: The hints of this Location.  # noqa: E501
        :rtype: str
        """
        return self._hints

    @hints.setter
    def hints(self, hints):
        """Sets the hints of this Location.

        notice  # noqa: E501

        :param hints: The hints of this Location.  # noqa: E501
        :type: str
        """

        self._hints = hints

    @property
    def name(self):
        """Gets the name of this Location.  # noqa: E501


        :return: The name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.


        :param name: The name of this Location.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def accessible_request(self):
        """Gets the accessible_request of this Location.  # noqa: E501

        Accessibility  # noqa: E501

        :return: The accessible_request of this Location.  # noqa: E501
        :rtype: str
        """
        return self._accessible_request

    @accessible_request.setter
    def accessible_request(self, accessible_request):
        """Sets the accessible_request of this Location.

        Accessibility  # noqa: E501

        :param accessible_request: The accessible_request of this Location.  # noqa: E501
        :type: str
        """

        self._accessible_request = accessible_request

    @property
    def accessible_request_object(self):
        """Gets the accessible_request_object of this Location.  # noqa: E501

        Accessibilities  # noqa: E501

        :return: The accessible_request_object of this Location.  # noqa: E501
        :rtype: list[Accessibility]
        """
        return self._accessible_request_object

    @accessible_request_object.setter
    def accessible_request_object(self, accessible_request_object):
        """Sets the accessible_request_object of this Location.

        Accessibilities  # noqa: E501

        :param accessible_request_object: The accessible_request_object of this Location.  # noqa: E501
        :type: list[Accessibility]
        """

        self._accessible_request_object = accessible_request_object

    @property
    def location_group(self):
        """Gets the location_group of this Location.  # noqa: E501


        :return: The location_group of this Location.  # noqa: E501
        :rtype: LocationGroup
        """
        return self._location_group

    @location_group.setter
    def location_group(self, location_group):
        """Sets the location_group of this Location.


        :param location_group: The location_group of this Location.  # noqa: E501
        :type: LocationGroup
        """

        self._location_group = location_group

    @property
    def direction_description(self):
        """Gets the direction_description of this Location.  # noqa: E501

        directions  # noqa: E501

        :return: The direction_description of this Location.  # noqa: E501
        :rtype: str
        """
        return self._direction_description

    @direction_description.setter
    def direction_description(self, direction_description):
        """Sets the direction_description of this Location.

        directions  # noqa: E501

        :param direction_description: The direction_description of this Location.  # noqa: E501
        :type: str
        """

        self._direction_description = direction_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
