# coding: utf-8

"""
    Sommerblut-Database

    Event and festival info  # noqa: E501

    OpenAPI spec version: 1.5.0
    Contact: support@xtain.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventEnsembles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firstname': 'str',
        'number_in_order': 'int',
        'ensemble_function': 'EventEnsembleFunction'
    }

    attribute_map = {
        'id': 'id',
        'firstname': 'firstname',
        'number_in_order': 'number_in_order',
        'ensemble_function': 'ensemble_function'
    }

    def __init__(self, id=None, firstname=None, number_in_order=None, ensemble_function=None):  # noqa: E501
        """EventEnsembles - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firstname = None
        self._number_in_order = None
        self._ensemble_function = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firstname is not None:
            self.firstname = firstname
        if number_in_order is not None:
            self.number_in_order = number_in_order
        if ensemble_function is not None:
            self.ensemble_function = ensemble_function

    @property
    def id(self):
        """Gets the id of this EventEnsembles.  # noqa: E501


        :return: The id of this EventEnsembles.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventEnsembles.


        :param id: The id of this EventEnsembles.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firstname(self):
        """Gets the firstname of this EventEnsembles.  # noqa: E501

        Full name  # noqa: E501

        :return: The firstname of this EventEnsembles.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this EventEnsembles.

        Full name  # noqa: E501

        :param firstname: The firstname of this EventEnsembles.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def number_in_order(self):
        """Gets the number_in_order of this EventEnsembles.  # noqa: E501

        Order number of person in ensemble  # noqa: E501

        :return: The number_in_order of this EventEnsembles.  # noqa: E501
        :rtype: int
        """
        return self._number_in_order

    @number_in_order.setter
    def number_in_order(self, number_in_order):
        """Sets the number_in_order of this EventEnsembles.

        Order number of person in ensemble  # noqa: E501

        :param number_in_order: The number_in_order of this EventEnsembles.  # noqa: E501
        :type: int
        """

        self._number_in_order = number_in_order

    @property
    def ensemble_function(self):
        """Gets the ensemble_function of this EventEnsembles.  # noqa: E501


        :return: The ensemble_function of this EventEnsembles.  # noqa: E501
        :rtype: EventEnsembleFunction
        """
        return self._ensemble_function

    @ensemble_function.setter
    def ensemble_function(self, ensemble_function):
        """Sets the ensemble_function of this EventEnsembles.


        :param ensemble_function: The ensemble_function of this EventEnsembles.  # noqa: E501
        :type: EventEnsembleFunction
        """

        self._ensemble_function = ensemble_function

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventEnsembles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventEnsembles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
