# coding: utf-8

"""
    Sommerblut-Database

    Event and festival info  # noqa: E501

    OpenAPI spec version: 1.5.0
    Contact: support@xtain.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventDate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'additional_title': 'str',
        '_date': 'date',
        'end_date': 'str',
        'opening_time': 'str',
        'location': 'str',
        'ticket_link': 'str',
        'contact_promoter': 'EventDateContactPromoter',
        'event': 'Event',
        'streaming_player': 'str',
        'chat': 'str'
    }

    attribute_map = {
        'id': 'id',
        'additional_title': 'additional_title',
        '_date': 'date',
        'end_date': 'end_date',
        'opening_time': 'opening_time',
        'location': 'location',
        'ticket_link': 'ticket_link',
        'contact_promoter': 'contact_promoter',
        'event': 'event',
        'streaming_player': 'streaming_player',
        'chat': 'chat'
    }

    def __init__(self, id=None, additional_title=None, _date=None, end_date=None, opening_time=None, location=None, ticket_link=None, contact_promoter=None, event=None, streaming_player=None, chat=None):  # noqa: E501
        """EventDate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._additional_title = None
        self.__date = None
        self._end_date = None
        self._opening_time = None
        self._location = None
        self._ticket_link = None
        self._contact_promoter = None
        self._event = None
        self._streaming_player = None
        self._chat = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if additional_title is not None:
            self.additional_title = additional_title
        if _date is not None:
            self._date = _date
        if end_date is not None:
            self.end_date = end_date
        if opening_time is not None:
            self.opening_time = opening_time
        if location is not None:
            self.location = location
        if ticket_link is not None:
            self.ticket_link = ticket_link
        if contact_promoter is not None:
            self.contact_promoter = contact_promoter
        if event is not None:
            self.event = event
        if streaming_player is not None:
            self.streaming_player = streaming_player
        if chat is not None:
            self.chat = chat

    @property
    def id(self):
        """Gets the id of this EventDate.  # noqa: E501


        :return: The id of this EventDate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventDate.


        :param id: The id of this EventDate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def additional_title(self):
        """Gets the additional_title of this EventDate.  # noqa: E501

        Date remark  # noqa: E501

        :return: The additional_title of this EventDate.  # noqa: E501
        :rtype: str
        """
        return self._additional_title

    @additional_title.setter
    def additional_title(self, additional_title):
        """Sets the additional_title of this EventDate.

        Date remark  # noqa: E501

        :param additional_title: The additional_title of this EventDate.  # noqa: E501
        :type: str
        """

        self._additional_title = additional_title

    @property
    def _date(self):
        """Gets the _date of this EventDate.  # noqa: E501

        Date of event  # noqa: E501

        :return: The _date of this EventDate.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EventDate.

        Date of event  # noqa: E501

        :param _date: The _date of this EventDate.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def end_date(self):
        """Gets the end_date of this EventDate.  # noqa: E501

        Ending time  # noqa: E501

        :return: The end_date of this EventDate.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EventDate.

        Ending time  # noqa: E501

        :param end_date: The end_date of this EventDate.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def opening_time(self):
        """Gets the opening_time of this EventDate.  # noqa: E501

        Opening time  # noqa: E501

        :return: The opening_time of this EventDate.  # noqa: E501
        :rtype: str
        """
        return self._opening_time

    @opening_time.setter
    def opening_time(self, opening_time):
        """Sets the opening_time of this EventDate.

        Opening time  # noqa: E501

        :param opening_time: The opening_time of this EventDate.  # noqa: E501
        :type: str
        """

        self._opening_time = opening_time

    @property
    def location(self):
        """Gets the location of this EventDate.  # noqa: E501

        Location  # noqa: E501

        :return: The location of this EventDate.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EventDate.

        Location  # noqa: E501

        :param location: The location of this EventDate.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def ticket_link(self):
        """Gets the ticket_link of this EventDate.  # noqa: E501

        Link to ticket shop  # noqa: E501

        :return: The ticket_link of this EventDate.  # noqa: E501
        :rtype: str
        """
        return self._ticket_link

    @ticket_link.setter
    def ticket_link(self, ticket_link):
        """Sets the ticket_link of this EventDate.

        Link to ticket shop  # noqa: E501

        :param ticket_link: The ticket_link of this EventDate.  # noqa: E501
        :type: str
        """

        self._ticket_link = ticket_link

    @property
    def contact_promoter(self):
        """Gets the contact_promoter of this EventDate.  # noqa: E501


        :return: The contact_promoter of this EventDate.  # noqa: E501
        :rtype: EventDateContactPromoter
        """
        return self._contact_promoter

    @contact_promoter.setter
    def contact_promoter(self, contact_promoter):
        """Sets the contact_promoter of this EventDate.


        :param contact_promoter: The contact_promoter of this EventDate.  # noqa: E501
        :type: EventDateContactPromoter
        """

        self._contact_promoter = contact_promoter

    @property
    def event(self):
        """Gets the event of this EventDate.  # noqa: E501


        :return: The event of this EventDate.  # noqa: E501
        :rtype: Event
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventDate.


        :param event: The event of this EventDate.  # noqa: E501
        :type: Event
        """

        self._event = event

    @property
    def streaming_player(self):
        """Gets the streaming_player of this EventDate.  # noqa: E501

        Streaming player  # noqa: E501

        :return: The streaming_player of this EventDate.  # noqa: E501
        :rtype: str
        """
        return self._streaming_player

    @streaming_player.setter
    def streaming_player(self, streaming_player):
        """Sets the streaming_player of this EventDate.

        Streaming player  # noqa: E501

        :param streaming_player: The streaming_player of this EventDate.  # noqa: E501
        :type: str
        """

        self._streaming_player = streaming_player

    @property
    def chat(self):
        """Gets the chat of this EventDate.  # noqa: E501

        Chat  # noqa: E501

        :return: The chat of this EventDate.  # noqa: E501
        :rtype: str
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this EventDate.

        Chat  # noqa: E501

        :param chat: The chat of this EventDate.  # noqa: E501
        :type: str
        """

        self._chat = chat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventDate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventDate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
