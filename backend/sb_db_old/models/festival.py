# coding: utf-8

"""
    Sommerblut-Database

    Event and festival info  # noqa: E501

    OpenAPI spec version: 1.5.0
    Contact: support@xtain.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Festival(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'year': 'str',
        'theme': 'str',
        'is_archived': 'bool',
        'is_released': 'bool',
        'summary': 'str',
        'press_reviews': 'str',
        'short_description': 'str',
        'festival_images': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'year': 'year',
        'theme': 'theme',
        'is_archived': 'is_archived',
        'is_released': 'is_released',
        'summary': 'summary',
        'press_reviews': 'press_reviews',
        'short_description': 'short_description',
        'festival_images': 'festival_images'
    }

    def __init__(self, id=None, name=None, year=None, theme=None, is_archived=None, is_released=None, summary=None, press_reviews=None, short_description=None, festival_images=None):  # noqa: E501
        """Festival - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._year = None
        self._theme = None
        self._is_archived = None
        self._is_released = None
        self._summary = None
        self._press_reviews = None
        self._short_description = None
        self._festival_images = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if year is not None:
            self.year = year
        if theme is not None:
            self.theme = theme
        if is_archived is not None:
            self.is_archived = is_archived
        if is_released is not None:
            self.is_released = is_released
        if summary is not None:
            self.summary = summary
        if press_reviews is not None:
            self.press_reviews = press_reviews
        if short_description is not None:
            self.short_description = short_description
        if festival_images is not None:
            self.festival_images = festival_images

    @property
    def id(self):
        """Gets the id of this Festival.  # noqa: E501


        :return: The id of this Festival.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Festival.


        :param id: The id of this Festival.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Festival.  # noqa: E501


        :return: The name of this Festival.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Festival.


        :param name: The name of this Festival.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def year(self):
        """Gets the year of this Festival.  # noqa: E501


        :return: The year of this Festival.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Festival.


        :param year: The year of this Festival.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def theme(self):
        """Gets the theme of this Festival.  # noqa: E501

        Festivals theme  # noqa: E501

        :return: The theme of this Festival.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this Festival.

        Festivals theme  # noqa: E501

        :param theme: The theme of this Festival.  # noqa: E501
        :type: str
        """

        self._theme = theme

    @property
    def is_archived(self):
        """Gets the is_archived of this Festival.  # noqa: E501

        Is the festival archived or not  # noqa: E501

        :return: The is_archived of this Festival.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this Festival.

        Is the festival archived or not  # noqa: E501

        :param is_archived: The is_archived of this Festival.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_released(self):
        """Gets the is_released of this Festival.  # noqa: E501

        Is this festival already released for the frontend  # noqa: E501

        :return: The is_released of this Festival.  # noqa: E501
        :rtype: bool
        """
        return self._is_released

    @is_released.setter
    def is_released(self, is_released):
        """Sets the is_released of this Festival.

        Is this festival already released for the frontend  # noqa: E501

        :param is_released: The is_released of this Festival.  # noqa: E501
        :type: bool
        """

        self._is_released = is_released

    @property
    def summary(self):
        """Gets the summary of this Festival.  # noqa: E501


        :return: The summary of this Festival.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Festival.


        :param summary: The summary of this Festival.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def press_reviews(self):
        """Gets the press_reviews of this Festival.  # noqa: E501

        Press reviews  # noqa: E501

        :return: The press_reviews of this Festival.  # noqa: E501
        :rtype: str
        """
        return self._press_reviews

    @press_reviews.setter
    def press_reviews(self, press_reviews):
        """Sets the press_reviews of this Festival.

        Press reviews  # noqa: E501

        :param press_reviews: The press_reviews of this Festival.  # noqa: E501
        :type: str
        """

        self._press_reviews = press_reviews

    @property
    def short_description(self):
        """Gets the short_description of this Festival.  # noqa: E501

        Short description  # noqa: E501

        :return: The short_description of this Festival.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Festival.

        Short description  # noqa: E501

        :param short_description: The short_description of this Festival.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def festival_images(self):
        """Gets the festival_images of this Festival.  # noqa: E501

        Festival images in .json  # noqa: E501

        :return: The festival_images of this Festival.  # noqa: E501
        :rtype: str
        """
        return self._festival_images

    @festival_images.setter
    def festival_images(self, festival_images):
        """Sets the festival_images of this Festival.

        Festival images in .json  # noqa: E501

        :param festival_images: The festival_images of this Festival.  # noqa: E501
        :type: str
        """

        self._festival_images = festival_images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Festival, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Festival):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
